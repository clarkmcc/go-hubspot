/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"encoding/json"
)

// PublicActionFunction struct for PublicActionFunction
type PublicActionFunction struct {
	FunctionSource string  `json:"functionSource"`
	FunctionType   string  `json:"functionType"`
	Id             *string `json:"id,omitempty"`
}

// NewPublicActionFunction instantiates a new PublicActionFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicActionFunction(functionSource string, functionType string) *PublicActionFunction {
	this := PublicActionFunction{}
	this.FunctionSource = functionSource
	this.FunctionType = functionType
	return &this
}

// NewPublicActionFunctionWithDefaults instantiates a new PublicActionFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicActionFunctionWithDefaults() *PublicActionFunction {
	this := PublicActionFunction{}
	return &this
}

// GetFunctionSource returns the FunctionSource field value
func (o *PublicActionFunction) GetFunctionSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionSource
}

// GetFunctionSourceOk returns a tuple with the FunctionSource field value
// and a boolean to check if the value has been set.
func (o *PublicActionFunction) GetFunctionSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionSource, true
}

// SetFunctionSource sets field value
func (o *PublicActionFunction) SetFunctionSource(v string) {
	o.FunctionSource = v
}

// GetFunctionType returns the FunctionType field value
func (o *PublicActionFunction) GetFunctionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionType
}

// GetFunctionTypeOk returns a tuple with the FunctionType field value
// and a boolean to check if the value has been set.
func (o *PublicActionFunction) GetFunctionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionType, true
}

// SetFunctionType sets field value
func (o *PublicActionFunction) SetFunctionType(v string) {
	o.FunctionType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PublicActionFunction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicActionFunction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PublicActionFunction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PublicActionFunction) SetId(v string) {
	o.Id = &v
}

func (o PublicActionFunction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["functionSource"] = o.FunctionSource
	}
	if true {
		toSerialize["functionType"] = o.FunctionType
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullablePublicActionFunction struct {
	value *PublicActionFunction
	isSet bool
}

func (v NullablePublicActionFunction) Get() *PublicActionFunction {
	return v.value
}

func (v *NullablePublicActionFunction) Set(val *PublicActionFunction) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicActionFunction) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicActionFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicActionFunction(val *PublicActionFunction) *NullablePublicActionFunction {
	return &NullablePublicActionFunction{value: val, isSet: true}
}

func (v NullablePublicActionFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicActionFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
