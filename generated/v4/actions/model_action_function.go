/*
Custom Workflow Actions

Create custom workflow actions

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"encoding/json"
)

// ActionFunction A serverless function associated with this custom workflow action.
type ActionFunction struct {
	// The function source code.
	FunctionSource string `json:"functionSource"`
	// The type of function. This determines when the function will be called.
	FunctionType string `json:"functionType"`
	// The ID qualifier for the function. This is used to specify which input field a function is associated with for `PRE_FETCH_OPTIONS` and `POST_FETCH_OPTIONS` function types.
	Id *string `json:"id,omitempty"`
}

// NewActionFunction instantiates a new ActionFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionFunction(functionSource string, functionType string) *ActionFunction {
	this := ActionFunction{}
	this.FunctionSource = functionSource
	this.FunctionType = functionType
	return &this
}

// NewActionFunctionWithDefaults instantiates a new ActionFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionFunctionWithDefaults() *ActionFunction {
	this := ActionFunction{}
	return &this
}

// GetFunctionSource returns the FunctionSource field value
func (o *ActionFunction) GetFunctionSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionSource
}

// GetFunctionSourceOk returns a tuple with the FunctionSource field value
// and a boolean to check if the value has been set.
func (o *ActionFunction) GetFunctionSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionSource, true
}

// SetFunctionSource sets field value
func (o *ActionFunction) SetFunctionSource(v string) {
	o.FunctionSource = v
}

// GetFunctionType returns the FunctionType field value
func (o *ActionFunction) GetFunctionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionType
}

// GetFunctionTypeOk returns a tuple with the FunctionType field value
// and a boolean to check if the value has been set.
func (o *ActionFunction) GetFunctionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionType, true
}

// SetFunctionType sets field value
func (o *ActionFunction) SetFunctionType(v string) {
	o.FunctionType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionFunction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionFunction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionFunction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActionFunction) SetId(v string) {
	o.Id = &v
}

func (o ActionFunction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["functionSource"] = o.FunctionSource
	}
	if true {
		toSerialize["functionType"] = o.FunctionType
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableActionFunction struct {
	value *ActionFunction
	isSet bool
}

func (v NullableActionFunction) Get() *ActionFunction {
	return v.value
}

func (v *NullableActionFunction) Set(val *ActionFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableActionFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableActionFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionFunction(val *ActionFunction) *NullableActionFunction {
	return &NullableActionFunction{value: val, isSet: true}
}

func (v NullableActionFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
