/*
Custom Workflow Actions

Create custom workflow actions

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"encoding/json"
)

// SingleFieldDependency struct for SingleFieldDependency
type SingleFieldDependency struct {
	DependencyType       string   `json:"dependencyType"`
	DependentFieldNames  []string `json:"dependentFieldNames"`
	ControllingFieldName string   `json:"controllingFieldName"`
}

// NewSingleFieldDependency instantiates a new SingleFieldDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleFieldDependency(dependencyType string, dependentFieldNames []string, controllingFieldName string) *SingleFieldDependency {
	this := SingleFieldDependency{}
	this.DependencyType = dependencyType
	this.DependentFieldNames = dependentFieldNames
	this.ControllingFieldName = controllingFieldName
	return &this
}

// NewSingleFieldDependencyWithDefaults instantiates a new SingleFieldDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleFieldDependencyWithDefaults() *SingleFieldDependency {
	this := SingleFieldDependency{}
	var dependencyType string = "SINGLE_FIELD"
	this.DependencyType = dependencyType
	return &this
}

// GetDependencyType returns the DependencyType field value
func (o *SingleFieldDependency) GetDependencyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DependencyType
}

// GetDependencyTypeOk returns a tuple with the DependencyType field value
// and a boolean to check if the value has been set.
func (o *SingleFieldDependency) GetDependencyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DependencyType, true
}

// SetDependencyType sets field value
func (o *SingleFieldDependency) SetDependencyType(v string) {
	o.DependencyType = v
}

// GetDependentFieldNames returns the DependentFieldNames field value
func (o *SingleFieldDependency) GetDependentFieldNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DependentFieldNames
}

// GetDependentFieldNamesOk returns a tuple with the DependentFieldNames field value
// and a boolean to check if the value has been set.
func (o *SingleFieldDependency) GetDependentFieldNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependentFieldNames, true
}

// SetDependentFieldNames sets field value
func (o *SingleFieldDependency) SetDependentFieldNames(v []string) {
	o.DependentFieldNames = v
}

// GetControllingFieldName returns the ControllingFieldName field value
func (o *SingleFieldDependency) GetControllingFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ControllingFieldName
}

// GetControllingFieldNameOk returns a tuple with the ControllingFieldName field value
// and a boolean to check if the value has been set.
func (o *SingleFieldDependency) GetControllingFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ControllingFieldName, true
}

// SetControllingFieldName sets field value
func (o *SingleFieldDependency) SetControllingFieldName(v string) {
	o.ControllingFieldName = v
}

func (o SingleFieldDependency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dependencyType"] = o.DependencyType
	}
	if true {
		toSerialize["dependentFieldNames"] = o.DependentFieldNames
	}
	if true {
		toSerialize["controllingFieldName"] = o.ControllingFieldName
	}
	return json.Marshal(toSerialize)
}

type NullableSingleFieldDependency struct {
	value *SingleFieldDependency
	isSet bool
}

func (v NullableSingleFieldDependency) Get() *SingleFieldDependency {
	return v.value
}

func (v *NullableSingleFieldDependency) Set(val *SingleFieldDependency) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleFieldDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleFieldDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleFieldDependency(val *SingleFieldDependency) *NullableSingleFieldDependency {
	return &NullableSingleFieldDependency{value: val, isSet: true}
}

func (v NullableSingleFieldDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleFieldDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
