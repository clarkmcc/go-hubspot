/*
Automation Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"encoding/json"
)

// OutputFieldDefinition struct for OutputFieldDefinition
type OutputFieldDefinition struct {
	TypeDefinition FieldTypeDefinition `json:"typeDefinition"`
}

// NewOutputFieldDefinition instantiates a new OutputFieldDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputFieldDefinition(typeDefinition FieldTypeDefinition) *OutputFieldDefinition {
	this := OutputFieldDefinition{}
	this.TypeDefinition = typeDefinition
	return &this
}

// NewOutputFieldDefinitionWithDefaults instantiates a new OutputFieldDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputFieldDefinitionWithDefaults() *OutputFieldDefinition {
	this := OutputFieldDefinition{}
	return &this
}

// GetTypeDefinition returns the TypeDefinition field value
func (o *OutputFieldDefinition) GetTypeDefinition() FieldTypeDefinition {
	if o == nil {
		var ret FieldTypeDefinition
		return ret
	}

	return o.TypeDefinition
}

// GetTypeDefinitionOk returns a tuple with the TypeDefinition field value
// and a boolean to check if the value has been set.
func (o *OutputFieldDefinition) GetTypeDefinitionOk() (*FieldTypeDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeDefinition, true
}

// SetTypeDefinition sets field value
func (o *OutputFieldDefinition) SetTypeDefinition(v FieldTypeDefinition) {
	o.TypeDefinition = v
}

func (o OutputFieldDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["typeDefinition"] = o.TypeDefinition
	}
	return json.Marshal(toSerialize)
}

type NullableOutputFieldDefinition struct {
	value *OutputFieldDefinition
	isSet bool
}

func (v NullableOutputFieldDefinition) Get() *OutputFieldDefinition {
	return v.value
}

func (v *NullableOutputFieldDefinition) Set(val *OutputFieldDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputFieldDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputFieldDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputFieldDefinition(val *OutputFieldDefinition) *NullableOutputFieldDefinition {
	return &NullableOutputFieldDefinition{value: val, isSet: true}
}

func (v NullableOutputFieldDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputFieldDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
