/*
Custom Workflow Actions

Create custom workflow actions

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"encoding/json"
)

// FieldTypeDefinition The data type expected by an input field.
type FieldTypeDefinition struct {
	// The input field name.
	Name string `json:"name"`
	// The data type of the field.
	Type string `json:"type"`
	// Controls how the field appears in HubSpot.
	FieldType *string `json:"fieldType,omitempty"`
	// A list of valid options for the field value.
	Options []Option `json:"options"`
	// A URL that will accept HTTPS requests when the valid options for the field are fetched.
	OptionsUrl *string `json:"optionsUrl,omitempty"`
	// This can be set to `OWNER` if the field should contain a HubSpot owner value.
	ReferencedObjectType *string `json:"referencedObjectType,omitempty"`
}

// NewFieldTypeDefinition instantiates a new FieldTypeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldTypeDefinition(name string, type_ string, options []Option) *FieldTypeDefinition {
	this := FieldTypeDefinition{}
	this.Name = name
	this.Type = type_
	this.Options = options
	return &this
}

// NewFieldTypeDefinitionWithDefaults instantiates a new FieldTypeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldTypeDefinitionWithDefaults() *FieldTypeDefinition {
	this := FieldTypeDefinition{}
	return &this
}

// GetName returns the Name field value
func (o *FieldTypeDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FieldTypeDefinition) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *FieldTypeDefinition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FieldTypeDefinition) SetType(v string) {
	o.Type = v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetFieldType() string {
	if o == nil || o.FieldType == nil {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetFieldTypeOk() (*string, bool) {
	if o == nil || o.FieldType == nil {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasFieldType() bool {
	if o != nil && o.FieldType != nil {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *FieldTypeDefinition) SetFieldType(v string) {
	o.FieldType = &v
}

// GetOptions returns the Options field value
func (o *FieldTypeDefinition) GetOptions() []Option {
	if o == nil {
		var ret []Option
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetOptionsOk() ([]Option, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *FieldTypeDefinition) SetOptions(v []Option) {
	o.Options = v
}

// GetOptionsUrl returns the OptionsUrl field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetOptionsUrl() string {
	if o == nil || o.OptionsUrl == nil {
		var ret string
		return ret
	}
	return *o.OptionsUrl
}

// GetOptionsUrlOk returns a tuple with the OptionsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetOptionsUrlOk() (*string, bool) {
	if o == nil || o.OptionsUrl == nil {
		return nil, false
	}
	return o.OptionsUrl, true
}

// HasOptionsUrl returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasOptionsUrl() bool {
	if o != nil && o.OptionsUrl != nil {
		return true
	}

	return false
}

// SetOptionsUrl gets a reference to the given string and assigns it to the OptionsUrl field.
func (o *FieldTypeDefinition) SetOptionsUrl(v string) {
	o.OptionsUrl = &v
}

// GetReferencedObjectType returns the ReferencedObjectType field value if set, zero value otherwise.
func (o *FieldTypeDefinition) GetReferencedObjectType() string {
	if o == nil || o.ReferencedObjectType == nil {
		var ret string
		return ret
	}
	return *o.ReferencedObjectType
}

// GetReferencedObjectTypeOk returns a tuple with the ReferencedObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTypeDefinition) GetReferencedObjectTypeOk() (*string, bool) {
	if o == nil || o.ReferencedObjectType == nil {
		return nil, false
	}
	return o.ReferencedObjectType, true
}

// HasReferencedObjectType returns a boolean if a field has been set.
func (o *FieldTypeDefinition) HasReferencedObjectType() bool {
	if o != nil && o.ReferencedObjectType != nil {
		return true
	}

	return false
}

// SetReferencedObjectType gets a reference to the given string and assigns it to the ReferencedObjectType field.
func (o *FieldTypeDefinition) SetReferencedObjectType(v string) {
	o.ReferencedObjectType = &v
}

func (o FieldTypeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.FieldType != nil {
		toSerialize["fieldType"] = o.FieldType
	}
	if true {
		toSerialize["options"] = o.Options
	}
	if o.OptionsUrl != nil {
		toSerialize["optionsUrl"] = o.OptionsUrl
	}
	if o.ReferencedObjectType != nil {
		toSerialize["referencedObjectType"] = o.ReferencedObjectType
	}
	return json.Marshal(toSerialize)
}

type NullableFieldTypeDefinition struct {
	value *FieldTypeDefinition
	isSet bool
}

func (v NullableFieldTypeDefinition) Get() *FieldTypeDefinition {
	return v.value
}

func (v *NullableFieldTypeDefinition) Set(val *FieldTypeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldTypeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldTypeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldTypeDefinition(val *FieldTypeDefinition) *NullableFieldTypeDefinition {
	return &NullableFieldTypeDefinition{value: val, isSet: true}
}

func (v NullableFieldTypeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldTypeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
