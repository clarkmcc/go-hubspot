/*
CrmPublicAssociationsServiceV4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_associations

import (
	"encoding/json"
	"time"
)

// BatchResponseLabelsBetweenObjectPair struct for BatchResponseLabelsBetweenObjectPair
type BatchResponseLabelsBetweenObjectPair struct {
	Status      string                    `json:"status"`
	Results     []LabelsBetweenObjectPair `json:"results"`
	RequestedAt *time.Time                `json:"requestedAt,omitempty"`
	StartedAt   time.Time                 `json:"startedAt"`
	CompletedAt time.Time                 `json:"completedAt"`
	Links       *map[string]string        `json:"links,omitempty"`
}

// NewBatchResponseLabelsBetweenObjectPair instantiates a new BatchResponseLabelsBetweenObjectPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchResponseLabelsBetweenObjectPair(status string, results []LabelsBetweenObjectPair, startedAt time.Time, completedAt time.Time) *BatchResponseLabelsBetweenObjectPair {
	this := BatchResponseLabelsBetweenObjectPair{}
	this.Status = status
	this.Results = results
	this.StartedAt = startedAt
	this.CompletedAt = completedAt
	return &this
}

// NewBatchResponseLabelsBetweenObjectPairWithDefaults instantiates a new BatchResponseLabelsBetweenObjectPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchResponseLabelsBetweenObjectPairWithDefaults() *BatchResponseLabelsBetweenObjectPair {
	this := BatchResponseLabelsBetweenObjectPair{}
	return &this
}

// GetStatus returns the Status field value
func (o *BatchResponseLabelsBetweenObjectPair) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BatchResponseLabelsBetweenObjectPair) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BatchResponseLabelsBetweenObjectPair) SetStatus(v string) {
	o.Status = v
}

// GetResults returns the Results field value
func (o *BatchResponseLabelsBetweenObjectPair) GetResults() []LabelsBetweenObjectPair {
	if o == nil {
		var ret []LabelsBetweenObjectPair
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *BatchResponseLabelsBetweenObjectPair) GetResultsOk() ([]LabelsBetweenObjectPair, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *BatchResponseLabelsBetweenObjectPair) SetResults(v []LabelsBetweenObjectPair) {
	o.Results = v
}

// GetRequestedAt returns the RequestedAt field value if set, zero value otherwise.
func (o *BatchResponseLabelsBetweenObjectPair) GetRequestedAt() time.Time {
	if o == nil || o.RequestedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseLabelsBetweenObjectPair) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil || o.RequestedAt == nil {
		return nil, false
	}
	return o.RequestedAt, true
}

// HasRequestedAt returns a boolean if a field has been set.
func (o *BatchResponseLabelsBetweenObjectPair) HasRequestedAt() bool {
	if o != nil && o.RequestedAt != nil {
		return true
	}

	return false
}

// SetRequestedAt gets a reference to the given time.Time and assigns it to the RequestedAt field.
func (o *BatchResponseLabelsBetweenObjectPair) SetRequestedAt(v time.Time) {
	o.RequestedAt = &v
}

// GetStartedAt returns the StartedAt field value
func (o *BatchResponseLabelsBetweenObjectPair) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *BatchResponseLabelsBetweenObjectPair) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *BatchResponseLabelsBetweenObjectPair) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

// GetCompletedAt returns the CompletedAt field value
func (o *BatchResponseLabelsBetweenObjectPair) GetCompletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value
// and a boolean to check if the value has been set.
func (o *BatchResponseLabelsBetweenObjectPair) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletedAt, true
}

// SetCompletedAt sets field value
func (o *BatchResponseLabelsBetweenObjectPair) SetCompletedAt(v time.Time) {
	o.CompletedAt = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BatchResponseLabelsBetweenObjectPair) GetLinks() map[string]string {
	if o == nil || o.Links == nil {
		var ret map[string]string
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseLabelsBetweenObjectPair) GetLinksOk() (*map[string]string, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BatchResponseLabelsBetweenObjectPair) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]string and assigns it to the Links field.
func (o *BatchResponseLabelsBetweenObjectPair) SetLinks(v map[string]string) {
	o.Links = &v
}

func (o BatchResponseLabelsBetweenObjectPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["results"] = o.Results
	}
	if o.RequestedAt != nil {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	if true {
		toSerialize["startedAt"] = o.StartedAt
	}
	if true {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableBatchResponseLabelsBetweenObjectPair struct {
	value *BatchResponseLabelsBetweenObjectPair
	isSet bool
}

func (v NullableBatchResponseLabelsBetweenObjectPair) Get() *BatchResponseLabelsBetweenObjectPair {
	return v.value
}

func (v *NullableBatchResponseLabelsBetweenObjectPair) Set(val *BatchResponseLabelsBetweenObjectPair) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchResponseLabelsBetweenObjectPair) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchResponseLabelsBetweenObjectPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchResponseLabelsBetweenObjectPair(val *BatchResponseLabelsBetweenObjectPair) *NullableBatchResponseLabelsBetweenObjectPair {
	return &NullableBatchResponseLabelsBetweenObjectPair{value: val, isSet: true}
}

func (v NullableBatchResponseLabelsBetweenObjectPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchResponseLabelsBetweenObjectPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
