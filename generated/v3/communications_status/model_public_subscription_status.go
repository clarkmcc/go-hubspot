/*
Subscriptions

Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package communications_status

import (
	"encoding/json"
)

// PublicSubscriptionStatus The status of a subscription for a contact.
type PublicSubscriptionStatus struct {
	// The ID of the brand that the subscription is associated with, if there is one.
	BrandId *int64 `json:"brandId,omitempty"`
	// The name of the subscription.
	Name string `json:"name"`
	// A description of the subscription.
	Description string `json:"description"`
	// The legal reason for the current status of the subscription.
	LegalBasis *string `json:"legalBasis,omitempty"`
	// The name of the preferences group that the subscription is associated with.
	PreferenceGroupName *string `json:"preferenceGroupName,omitempty"`
	// The ID for the subscription.
	Id string `json:"id"`
	// A more detailed explanation to go with the legal basis.
	LegalBasisExplanation *string `json:"legalBasisExplanation,omitempty"`
	// Whether the contact is subscribed.
	Status string `json:"status"`
	// Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
	SourceOfStatus string `json:"sourceOfStatus"`
}

// NewPublicSubscriptionStatus instantiates a new PublicSubscriptionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicSubscriptionStatus(name string, description string, id string, status string, sourceOfStatus string) *PublicSubscriptionStatus {
	this := PublicSubscriptionStatus{}
	this.Name = name
	this.Description = description
	this.Id = id
	this.Status = status
	this.SourceOfStatus = sourceOfStatus
	return &this
}

// NewPublicSubscriptionStatusWithDefaults instantiates a new PublicSubscriptionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicSubscriptionStatusWithDefaults() *PublicSubscriptionStatus {
	this := PublicSubscriptionStatus{}
	return &this
}

// GetBrandId returns the BrandId field value if set, zero value otherwise.
func (o *PublicSubscriptionStatus) GetBrandId() int64 {
	if o == nil || o.BrandId == nil {
		var ret int64
		return ret
	}
	return *o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetBrandIdOk() (*int64, bool) {
	if o == nil || o.BrandId == nil {
		return nil, false
	}
	return o.BrandId, true
}

// HasBrandId returns a boolean if a field has been set.
func (o *PublicSubscriptionStatus) HasBrandId() bool {
	if o != nil && o.BrandId != nil {
		return true
	}

	return false
}

// SetBrandId gets a reference to the given int64 and assigns it to the BrandId field.
func (o *PublicSubscriptionStatus) SetBrandId(v int64) {
	o.BrandId = &v
}

// GetName returns the Name field value
func (o *PublicSubscriptionStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicSubscriptionStatus) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *PublicSubscriptionStatus) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PublicSubscriptionStatus) SetDescription(v string) {
	o.Description = v
}

// GetLegalBasis returns the LegalBasis field value if set, zero value otherwise.
func (o *PublicSubscriptionStatus) GetLegalBasis() string {
	if o == nil || o.LegalBasis == nil {
		var ret string
		return ret
	}
	return *o.LegalBasis
}

// GetLegalBasisOk returns a tuple with the LegalBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetLegalBasisOk() (*string, bool) {
	if o == nil || o.LegalBasis == nil {
		return nil, false
	}
	return o.LegalBasis, true
}

// HasLegalBasis returns a boolean if a field has been set.
func (o *PublicSubscriptionStatus) HasLegalBasis() bool {
	if o != nil && o.LegalBasis != nil {
		return true
	}

	return false
}

// SetLegalBasis gets a reference to the given string and assigns it to the LegalBasis field.
func (o *PublicSubscriptionStatus) SetLegalBasis(v string) {
	o.LegalBasis = &v
}

// GetPreferenceGroupName returns the PreferenceGroupName field value if set, zero value otherwise.
func (o *PublicSubscriptionStatus) GetPreferenceGroupName() string {
	if o == nil || o.PreferenceGroupName == nil {
		var ret string
		return ret
	}
	return *o.PreferenceGroupName
}

// GetPreferenceGroupNameOk returns a tuple with the PreferenceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetPreferenceGroupNameOk() (*string, bool) {
	if o == nil || o.PreferenceGroupName == nil {
		return nil, false
	}
	return o.PreferenceGroupName, true
}

// HasPreferenceGroupName returns a boolean if a field has been set.
func (o *PublicSubscriptionStatus) HasPreferenceGroupName() bool {
	if o != nil && o.PreferenceGroupName != nil {
		return true
	}

	return false
}

// SetPreferenceGroupName gets a reference to the given string and assigns it to the PreferenceGroupName field.
func (o *PublicSubscriptionStatus) SetPreferenceGroupName(v string) {
	o.PreferenceGroupName = &v
}

// GetId returns the Id field value
func (o *PublicSubscriptionStatus) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicSubscriptionStatus) SetId(v string) {
	o.Id = v
}

// GetLegalBasisExplanation returns the LegalBasisExplanation field value if set, zero value otherwise.
func (o *PublicSubscriptionStatus) GetLegalBasisExplanation() string {
	if o == nil || o.LegalBasisExplanation == nil {
		var ret string
		return ret
	}
	return *o.LegalBasisExplanation
}

// GetLegalBasisExplanationOk returns a tuple with the LegalBasisExplanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetLegalBasisExplanationOk() (*string, bool) {
	if o == nil || o.LegalBasisExplanation == nil {
		return nil, false
	}
	return o.LegalBasisExplanation, true
}

// HasLegalBasisExplanation returns a boolean if a field has been set.
func (o *PublicSubscriptionStatus) HasLegalBasisExplanation() bool {
	if o != nil && o.LegalBasisExplanation != nil {
		return true
	}

	return false
}

// SetLegalBasisExplanation gets a reference to the given string and assigns it to the LegalBasisExplanation field.
func (o *PublicSubscriptionStatus) SetLegalBasisExplanation(v string) {
	o.LegalBasisExplanation = &v
}

// GetStatus returns the Status field value
func (o *PublicSubscriptionStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PublicSubscriptionStatus) SetStatus(v string) {
	o.Status = v
}

// GetSourceOfStatus returns the SourceOfStatus field value
func (o *PublicSubscriptionStatus) GetSourceOfStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceOfStatus
}

// GetSourceOfStatusOk returns a tuple with the SourceOfStatus field value
// and a boolean to check if the value has been set.
func (o *PublicSubscriptionStatus) GetSourceOfStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceOfStatus, true
}

// SetSourceOfStatus sets field value
func (o *PublicSubscriptionStatus) SetSourceOfStatus(v string) {
	o.SourceOfStatus = v
}

func (o PublicSubscriptionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BrandId != nil {
		toSerialize["brandId"] = o.BrandId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.LegalBasis != nil {
		toSerialize["legalBasis"] = o.LegalBasis
	}
	if o.PreferenceGroupName != nil {
		toSerialize["preferenceGroupName"] = o.PreferenceGroupName
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.LegalBasisExplanation != nil {
		toSerialize["legalBasisExplanation"] = o.LegalBasisExplanation
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["sourceOfStatus"] = o.SourceOfStatus
	}
	return json.Marshal(toSerialize)
}

type NullablePublicSubscriptionStatus struct {
	value *PublicSubscriptionStatus
	isSet bool
}

func (v NullablePublicSubscriptionStatus) Get() *PublicSubscriptionStatus {
	return v.value
}

func (v *NullablePublicSubscriptionStatus) Set(val *PublicSubscriptionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicSubscriptionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicSubscriptionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicSubscriptionStatus(val *PublicSubscriptionStatus) *NullablePublicSubscriptionStatus {
	return &NullablePublicSubscriptionStatus{value: val, isSet: true}
}

func (v NullablePublicSubscriptionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicSubscriptionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
