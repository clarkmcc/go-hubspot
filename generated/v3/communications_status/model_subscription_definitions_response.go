/*
Subscriptions

Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package communications_status

import (
	"encoding/json"
)

// SubscriptionDefinitionsResponse A collection of subscription definitions for the portal.
type SubscriptionDefinitionsResponse struct {
	// A list of all subscription definitions.
	SubscriptionDefinitions []SubscriptionDefinition `json:"subscriptionDefinitions"`
}

// NewSubscriptionDefinitionsResponse instantiates a new SubscriptionDefinitionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionDefinitionsResponse(subscriptionDefinitions []SubscriptionDefinition) *SubscriptionDefinitionsResponse {
	this := SubscriptionDefinitionsResponse{}
	this.SubscriptionDefinitions = subscriptionDefinitions
	return &this
}

// NewSubscriptionDefinitionsResponseWithDefaults instantiates a new SubscriptionDefinitionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionDefinitionsResponseWithDefaults() *SubscriptionDefinitionsResponse {
	this := SubscriptionDefinitionsResponse{}
	return &this
}

// GetSubscriptionDefinitions returns the SubscriptionDefinitions field value
func (o *SubscriptionDefinitionsResponse) GetSubscriptionDefinitions() []SubscriptionDefinition {
	if o == nil {
		var ret []SubscriptionDefinition
		return ret
	}

	return o.SubscriptionDefinitions
}

// GetSubscriptionDefinitionsOk returns a tuple with the SubscriptionDefinitions field value
// and a boolean to check if the value has been set.
func (o *SubscriptionDefinitionsResponse) GetSubscriptionDefinitionsOk() ([]SubscriptionDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionDefinitions, true
}

// SetSubscriptionDefinitions sets field value
func (o *SubscriptionDefinitionsResponse) SetSubscriptionDefinitions(v []SubscriptionDefinition) {
	o.SubscriptionDefinitions = v
}

func (o SubscriptionDefinitionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subscriptionDefinitions"] = o.SubscriptionDefinitions
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionDefinitionsResponse struct {
	value *SubscriptionDefinitionsResponse
	isSet bool
}

func (v NullableSubscriptionDefinitionsResponse) Get() *SubscriptionDefinitionsResponse {
	return v.value
}

func (v *NullableSubscriptionDefinitionsResponse) Set(val *SubscriptionDefinitionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionDefinitionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionDefinitionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionDefinitionsResponse(val *SubscriptionDefinitionsResponse) *NullableSubscriptionDefinitionsResponse {
	return &NullableSubscriptionDefinitionsResponse{value: val, isSet: true}
}

func (v NullableSubscriptionDefinitionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionDefinitionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
