/*
Crm Owners

HubSpot uses **owners** to assign CRM objects to specific people in your organization. The endpoints described here are used to get a list of the owners that are available for an account. To assign an owner to an object, set the hubspot_owner_id property using the appropriate CRM object update or create a request.  If teams are available for your HubSpot tier, these endpoints will also indicate which team(s) an owner can access, as well as which team is the owner's primary team.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package owners

import (
	"encoding/json"
	"time"
)

// PublicOwner struct for PublicOwner
type PublicOwner struct {
	FirstName *string      `json:"firstName,omitempty"`
	LastName  *string      `json:"lastName,omitempty"`
	CreatedAt time.Time    `json:"createdAt"`
	Archived  bool         `json:"archived"`
	Teams     []PublicTeam `json:"teams,omitempty"`
	Id        string       `json:"id"`
	UserId    *int32       `json:"userId,omitempty"`
	Email     *string      `json:"email,omitempty"`
	UpdatedAt time.Time    `json:"updatedAt"`
}

// NewPublicOwner instantiates a new PublicOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicOwner(createdAt time.Time, archived bool, id string, updatedAt time.Time) *PublicOwner {
	this := PublicOwner{}
	this.CreatedAt = createdAt
	this.Archived = archived
	this.Id = id
	this.UpdatedAt = updatedAt
	return &this
}

// NewPublicOwnerWithDefaults instantiates a new PublicOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicOwnerWithDefaults() *PublicOwner {
	this := PublicOwner{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *PublicOwner) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *PublicOwner) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *PublicOwner) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *PublicOwner) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *PublicOwner) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *PublicOwner) SetLastName(v string) {
	o.LastName = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicOwner) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicOwner) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetArchived returns the Archived field value
func (o *PublicOwner) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *PublicOwner) SetArchived(v bool) {
	o.Archived = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *PublicOwner) GetTeams() []PublicTeam {
	if o == nil || o.Teams == nil {
		var ret []PublicTeam
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetTeamsOk() ([]PublicTeam, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *PublicOwner) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []PublicTeam and assigns it to the Teams field.
func (o *PublicOwner) SetTeams(v []PublicTeam) {
	o.Teams = v
}

// GetId returns the Id field value
func (o *PublicOwner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicOwner) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PublicOwner) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PublicOwner) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *PublicOwner) SetUserId(v int32) {
	o.UserId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PublicOwner) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PublicOwner) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PublicOwner) SetEmail(v string) {
	o.Email = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PublicOwner) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicOwner) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PublicOwner) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o PublicOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["archived"] = o.Archived
	}
	if o.Teams != nil {
		toSerialize["teams"] = o.Teams
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePublicOwner struct {
	value *PublicOwner
	isSet bool
}

func (v NullablePublicOwner) Get() *PublicOwner {
	return v.value
}

func (v *NullablePublicOwner) Set(val *PublicOwner) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicOwner) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicOwner(val *PublicOwner) *NullablePublicOwner {
	return &NullablePublicOwner{value: val, isSet: true}
}

func (v NullablePublicOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
