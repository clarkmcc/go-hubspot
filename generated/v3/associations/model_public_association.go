/*
Associations

Associations define the relationships between objects in HubSpot. These endpoints allow you to create, read, and remove associations.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package associations

import (
	"encoding/json"
)

// PublicAssociation struct for PublicAssociation
type PublicAssociation struct {
	From PublicObjectId `json:"from"`
	To   PublicObjectId `json:"to"`
	Type string         `json:"type"`
}

// NewPublicAssociation instantiates a new PublicAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAssociation(from PublicObjectId, to PublicObjectId, type_ string) *PublicAssociation {
	this := PublicAssociation{}
	this.From = from
	this.To = to
	this.Type = type_
	return &this
}

// NewPublicAssociationWithDefaults instantiates a new PublicAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAssociationWithDefaults() *PublicAssociation {
	this := PublicAssociation{}
	return &this
}

// GetFrom returns the From field value
func (o *PublicAssociation) GetFrom() PublicObjectId {
	if o == nil {
		var ret PublicObjectId
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *PublicAssociation) GetFromOk() (*PublicObjectId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *PublicAssociation) SetFrom(v PublicObjectId) {
	o.From = v
}

// GetTo returns the To field value
func (o *PublicAssociation) GetTo() PublicObjectId {
	if o == nil {
		var ret PublicObjectId
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *PublicAssociation) GetToOk() (*PublicObjectId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *PublicAssociation) SetTo(v PublicObjectId) {
	o.To = v
}

// GetType returns the Type field value
func (o *PublicAssociation) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicAssociation) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicAssociation) SetType(v string) {
	o.Type = v
}

func (o PublicAssociation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["to"] = o.To
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePublicAssociation struct {
	value *PublicAssociation
	isSet bool
}

func (v NullablePublicAssociation) Get() *PublicAssociation {
	return v.value
}

func (v *NullablePublicAssociation) Set(val *PublicAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAssociation(val *PublicAssociation) *NullablePublicAssociation {
	return &NullablePublicAssociation{value: val, isSet: true}
}

func (v NullablePublicAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
