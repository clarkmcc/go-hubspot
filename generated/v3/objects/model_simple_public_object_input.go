/*
CRM Objects

CRM objects such as companies, contacts, deals, line items, products, tickets, and quotes are standard objects in HubSpotâ€™s CRM. These core building blocks support custom properties, store critical information, and play a central role in the HubSpot application.  ## Supported Object Types  This API provides access to collections of CRM objects, which return a map of property names to values. Each object type has its own set of default properties, which can be found by exploring the [CRM Object Properties API](https://developers.hubspot.com/docs/methods/crm-properties/crm-properties-overview).  |Object Type |Properties returned by default | |--|--| | `companies` | `name`, `domain` | | `contacts` | `firstname`, `lastname`, `email` | | `deals` | `dealname`, `amount`, `closedate`, `pipeline`, `dealstage` | | `products` | `name`, `description`, `price` | | `tickets` | `content`, `hs_pipeline`, `hs_pipeline_stage`, `hs_ticket_category`, `hs_ticket_priority`, `subject` |  Find a list of all properties for an object type using the [CRM Object Properties](https://developers.hubspot.com/docs/methods/crm-properties/get-properties) API. e.g. `GET https://api.hubapi.com/properties/v2/companies/properties`. Change the properties returned in the response using the `properties` array in the request body.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// SimplePublicObjectInput struct for SimplePublicObjectInput
type SimplePublicObjectInput struct {
	Properties map[string]string `json:"properties"`
}

// NewSimplePublicObjectInput instantiates a new SimplePublicObjectInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimplePublicObjectInput(properties map[string]string) *SimplePublicObjectInput {
	this := SimplePublicObjectInput{}
	this.Properties = properties
	return &this
}

// NewSimplePublicObjectInputWithDefaults instantiates a new SimplePublicObjectInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimplePublicObjectInputWithDefaults() *SimplePublicObjectInput {
	this := SimplePublicObjectInput{}
	return &this
}

// GetProperties returns the Properties field value
func (o *SimplePublicObjectInput) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *SimplePublicObjectInput) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *SimplePublicObjectInput) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o SimplePublicObjectInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableSimplePublicObjectInput struct {
	value *SimplePublicObjectInput
	isSet bool
}

func (v NullableSimplePublicObjectInput) Get() *SimplePublicObjectInput {
	return v.value
}

func (v *NullableSimplePublicObjectInput) Set(val *SimplePublicObjectInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplePublicObjectInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplePublicObjectInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplePublicObjectInput(val *SimplePublicObjectInput) *NullableSimplePublicObjectInput {
	return &NullableSimplePublicObjectInput{value: val, isSet: true}
}

func (v NullableSimplePublicObjectInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplePublicObjectInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
