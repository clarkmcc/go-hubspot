/*
Marketing Events Extension

These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events_beta

import (
	"encoding/json"
)

// MarketingEventSubscriber struct for MarketingEventSubscriber
type MarketingEventSubscriber struct {
	// The date and time at which the contact subscribed to the event.
	InteractionDateTime int64              `json:"interactionDateTime"`
	Properties          *map[string]string `json:"properties,omitempty"`
	Vid                 *int32             `json:"vid,omitempty"`
}

// NewMarketingEventSubscriber instantiates a new MarketingEventSubscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketingEventSubscriber(interactionDateTime int64) *MarketingEventSubscriber {
	this := MarketingEventSubscriber{}
	this.InteractionDateTime = interactionDateTime
	return &this
}

// NewMarketingEventSubscriberWithDefaults instantiates a new MarketingEventSubscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketingEventSubscriberWithDefaults() *MarketingEventSubscriber {
	this := MarketingEventSubscriber{}
	return &this
}

// GetInteractionDateTime returns the InteractionDateTime field value
func (o *MarketingEventSubscriber) GetInteractionDateTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.InteractionDateTime
}

// GetInteractionDateTimeOk returns a tuple with the InteractionDateTime field value
// and a boolean to check if the value has been set.
func (o *MarketingEventSubscriber) GetInteractionDateTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InteractionDateTime, true
}

// SetInteractionDateTime sets field value
func (o *MarketingEventSubscriber) SetInteractionDateTime(v int64) {
	o.InteractionDateTime = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *MarketingEventSubscriber) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingEventSubscriber) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *MarketingEventSubscriber) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *MarketingEventSubscriber) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *MarketingEventSubscriber) GetVid() int32 {
	if o == nil || o.Vid == nil {
		var ret int32
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingEventSubscriber) GetVidOk() (*int32, bool) {
	if o == nil || o.Vid == nil {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *MarketingEventSubscriber) HasVid() bool {
	if o != nil && o.Vid != nil {
		return true
	}

	return false
}

// SetVid gets a reference to the given int32 and assigns it to the Vid field.
func (o *MarketingEventSubscriber) SetVid(v int32) {
	o.Vid = &v
}

func (o MarketingEventSubscriber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["interactionDateTime"] = o.InteractionDateTime
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Vid != nil {
		toSerialize["vid"] = o.Vid
	}
	return json.Marshal(toSerialize)
}

type NullableMarketingEventSubscriber struct {
	value *MarketingEventSubscriber
	isSet bool
}

func (v NullableMarketingEventSubscriber) Get() *MarketingEventSubscriber {
	return v.value
}

func (v *NullableMarketingEventSubscriber) Set(val *MarketingEventSubscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketingEventSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketingEventSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketingEventSubscriber(val *MarketingEventSubscriber) *NullableMarketingEventSubscriber {
	return &NullableMarketingEventSubscriber{value: val, isSet: true}
}

func (v NullableMarketingEventSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketingEventSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
