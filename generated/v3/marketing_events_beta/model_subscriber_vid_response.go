/*
Marketing Events Extension

These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events_beta

import (
	"encoding/json"
)

// SubscriberVidResponse struct for SubscriberVidResponse
type SubscriberVidResponse struct {
	Vid int32 `json:"vid"`
}

// NewSubscriberVidResponse instantiates a new SubscriberVidResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriberVidResponse(vid int32) *SubscriberVidResponse {
	this := SubscriberVidResponse{}
	this.Vid = vid
	return &this
}

// NewSubscriberVidResponseWithDefaults instantiates a new SubscriberVidResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberVidResponseWithDefaults() *SubscriberVidResponse {
	this := SubscriberVidResponse{}
	return &this
}

// GetVid returns the Vid field value
func (o *SubscriberVidResponse) GetVid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vid
}

// GetVidOk returns a tuple with the Vid field value
// and a boolean to check if the value has been set.
func (o *SubscriberVidResponse) GetVidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vid, true
}

// SetVid sets field value
func (o *SubscriberVidResponse) SetVid(v int32) {
	o.Vid = v
}

func (o SubscriberVidResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vid"] = o.Vid
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriberVidResponse struct {
	value *SubscriberVidResponse
	isSet bool
}

func (v NullableSubscriberVidResponse) Get() *SubscriberVidResponse {
	return v.value
}

func (v *NullableSubscriberVidResponse) Set(val *SubscriberVidResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriberVidResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriberVidResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriberVidResponse(val *SubscriberVidResponse) *NullableSubscriberVidResponse {
	return &NullableSubscriberVidResponse{value: val, isSet: true}
}

func (v NullableSubscriberVidResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriberVidResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
