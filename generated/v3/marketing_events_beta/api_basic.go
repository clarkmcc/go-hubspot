/*
Marketing Events Extension

These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marketing_events_beta

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"

	"github.com/clarkmcc/go-hubspot"
	"net/url"
	"strings"
)

// BasicApiService BasicApi service
type BasicApiService service

type ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest struct {
	ctx               context.Context
	ApiService        *BasicApiService
	externalEventId   string
	externalAccountId *string
}

// The account id associated with the marketing event
func (r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest) ExternalAccountId(externalAccountId string) ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveExecute(r)
}

/*
DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive Delete a marketing event

Deletes an existing Marketing Event with the specified id, if one exists.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to delete
 @return ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest
*/
func (a *BasicApiService) DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive(ctx context.Context, externalEventId string) ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest {
	return ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
func (a *BasicApiService) DeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveExecute(r ApiDeleteMarketingV3MarketingEventsEventsExternalEventIdArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.DeleteMarketingV3MarketingEventsEventsExternalEventIdArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalAccountId == nil {
		return nil, reportError("externalAccountId is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest struct {
	ctx               context.Context
	ApiService        *BasicApiService
	externalEventId   string
	externalAccountId *string
}

// The account id associated with the marketing event
func (r ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest) ExternalAccountId(externalAccountId string) ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest) Execute() (*MarketingEventPublicReadResponse, *http.Response, error) {
	return r.ApiService.GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdExecute(r)
}

/*
GetMarketingV3MarketingEventsEventsExternalEventIdGetById Get a marketing event

Returns the details of the Marketing Event with the specified id, if one exists.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to return
 @return ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest
*/
func (a *BasicApiService) GetMarketingV3MarketingEventsEventsExternalEventIdGetById(ctx context.Context, externalEventId string) ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest {
	return ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicReadResponse
func (a *BasicApiService) GetMarketingV3MarketingEventsEventsExternalEventIdGetByIdExecute(r ApiGetMarketingV3MarketingEventsEventsExternalEventIdGetByIdRequest) (*MarketingEventPublicReadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingEventPublicReadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.GetMarketingV3MarketingEventsEventsExternalEventIdGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest struct {
	ctx                               context.Context
	ApiService                        *BasicApiService
	externalEventId                   string
	externalAccountId                 *string
	marketingEventUpdateRequestParams *MarketingEventUpdateRequestParams
}

// The account id associated with the marketing event
func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) ExternalAccountId(externalAccountId string) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest {
	r.externalAccountId = &externalAccountId
	return r
}

// The details of the marketing event to update
func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) MarketingEventUpdateRequestParams(marketingEventUpdateRequestParams MarketingEventUpdateRequestParams) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest {
	r.marketingEventUpdateRequestParams = &marketingEventUpdateRequestParams
	return r
}

func (r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) Execute() (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	return r.ApiService.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateExecute(r)
}

/*
PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate Update a marketing event

Updates an existing Marketing Event with the specified id, if one exists.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to update
 @return ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest
*/
func (a *BasicApiService) PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate(ctx context.Context, externalEventId string) ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest {
	return ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicDefaultResponse
func (a *BasicApiService) PatchMarketingV3MarketingEventsEventsExternalEventIdUpdateExecute(r ApiPatchMarketingV3MarketingEventsEventsExternalEventIdUpdateRequest) (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingEventPublicDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PatchMarketingV3MarketingEventsEventsExternalEventIdUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}
	if r.marketingEventUpdateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventUpdateRequestParams is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventUpdateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsEventsCreateRequest struct {
	ctx                               context.Context
	ApiService                        *BasicApiService
	marketingEventCreateRequestParams *MarketingEventCreateRequestParams
}

// The details of the marketing event to create
func (r ApiPostMarketingV3MarketingEventsEventsCreateRequest) MarketingEventCreateRequestParams(marketingEventCreateRequestParams MarketingEventCreateRequestParams) ApiPostMarketingV3MarketingEventsEventsCreateRequest {
	r.marketingEventCreateRequestParams = &marketingEventCreateRequestParams
	return r
}

func (r ApiPostMarketingV3MarketingEventsEventsCreateRequest) Execute() (*MarketingEventDefaultResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsEventsCreateExecute(r)
}

/*
PostMarketingV3MarketingEventsEventsCreate Create a marketing event

Creates a new marketing event in HubSpot

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3MarketingEventsEventsCreateRequest
*/
func (a *BasicApiService) PostMarketingV3MarketingEventsEventsCreate(ctx context.Context) ApiPostMarketingV3MarketingEventsEventsCreateRequest {
	return ApiPostMarketingV3MarketingEventsEventsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return MarketingEventDefaultResponse
func (a *BasicApiService) PostMarketingV3MarketingEventsEventsCreateExecute(r ApiPostMarketingV3MarketingEventsEventsCreateRequest) (*MarketingEventDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingEventDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PostMarketingV3MarketingEventsEventsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.marketingEventCreateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventCreateRequestParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventCreateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest struct {
	ctx               context.Context
	ApiService        *BasicApiService
	externalEventId   string
	externalAccountId *string
}

// The account id associated with the marketing event
func (r ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest) ExternalAccountId(externalAccountId string) ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest {
	r.externalAccountId = &externalAccountId
	return r
}

func (r ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest) Execute() (*MarketingEventDefaultResponse, *http.Response, error) {
	return r.ApiService.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelExecute(r)
}

/*
PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel Mark a marketing event as cancelled

Mark a marketing event as cancelled.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to mark as cancelled
 @return ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest
*/
func (a *BasicApiService) PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(ctx context.Context, externalEventId string) ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest {
	return ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventDefaultResponse
func (a *BasicApiService) PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelExecute(r ApiPostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelRequest) (*MarketingEventDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingEventDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PostMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalAccountId == nil {
		return localVarReturnValue, nil, reportError("externalAccountId is required and must be specified")
	}

	localVarQueryParams.Add("externalAccountId", parameterToString(*r.externalAccountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest struct {
	ctx                               context.Context
	ApiService                        *BasicApiService
	externalEventId                   string
	marketingEventCreateRequestParams *MarketingEventCreateRequestParams
}

// The details of the marketing event to upsert
func (r ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest) MarketingEventCreateRequestParams(marketingEventCreateRequestParams MarketingEventCreateRequestParams) ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest {
	r.marketingEventCreateRequestParams = &marketingEventCreateRequestParams
	return r
}

func (r ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest) Execute() (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	return r.ApiService.PutMarketingV3MarketingEventsEventsExternalEventIdReplaceExecute(r)
}

/*
PutMarketingV3MarketingEventsEventsExternalEventIdReplace Create or update a marketing event

Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalEventId The id of the marketing event to upsert
 @return ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest
*/
func (a *BasicApiService) PutMarketingV3MarketingEventsEventsExternalEventIdReplace(ctx context.Context, externalEventId string) ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest {
	return ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest{
		ApiService:      a,
		ctx:             ctx,
		externalEventId: externalEventId,
	}
}

// Execute executes the request
//  @return MarketingEventPublicDefaultResponse
func (a *BasicApiService) PutMarketingV3MarketingEventsEventsExternalEventIdReplaceExecute(r ApiPutMarketingV3MarketingEventsEventsExternalEventIdReplaceRequest) (*MarketingEventPublicDefaultResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingEventPublicDefaultResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BasicApiService.PutMarketingV3MarketingEventsEventsExternalEventIdReplace")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/marketing-events/events/{externalEventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalEventId"+"}", url.PathEscape(parameterToString(r.externalEventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.marketingEventCreateRequestParams == nil {
		return localVarReturnValue, nil, reportError("marketingEventCreateRequestParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.marketingEventCreateRequestParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
