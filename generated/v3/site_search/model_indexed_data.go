/*
CMS Site Search

Use these endpoints for searching content on your HubSpot hosted CMS website(s).

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package site_search

import (
	"encoding/json"
)

// IndexedData The indexed data in HubSpot
type IndexedData struct {
	// The ID of the document in HubSpot.
	Id string `json:"id"`
	// The type of document. Can be `SITE_PAGE`, `LANDING_PAGE`, `BLOG_POST`, `LISTING_PAGE`, or `KNOWLEDGE_ARTICLE`.
	Type string `json:"type"`
	// The indexed fields in HubSpot.
	Fields map[string]IndexedField `json:"fields"`
}

// NewIndexedData instantiates a new IndexedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexedData(id string, type_ string, fields map[string]IndexedField) *IndexedData {
	this := IndexedData{}
	this.Id = id
	this.Type = type_
	this.Fields = fields
	return &this
}

// NewIndexedDataWithDefaults instantiates a new IndexedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexedDataWithDefaults() *IndexedData {
	this := IndexedData{}
	return &this
}

// GetId returns the Id field value
func (o *IndexedData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IndexedData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IndexedData) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *IndexedData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IndexedData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IndexedData) SetType(v string) {
	o.Type = v
}

// GetFields returns the Fields field value
func (o *IndexedData) GetFields() map[string]IndexedField {
	if o == nil {
		var ret map[string]IndexedField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *IndexedData) GetFieldsOk() (*map[string]IndexedField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *IndexedData) SetFields(v map[string]IndexedField) {
	o.Fields = v
}

func (o IndexedData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableIndexedData struct {
	value *IndexedData
	isSet bool
}

func (v NullableIndexedData) Get() *IndexedData {
	return v.value
}

func (v *NullableIndexedData) Set(val *IndexedData) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexedData) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexedData(val *IndexedData) *NullableIndexedData {
	return &NullableIndexedData{value: val, isSet: true}
}

func (v NullableIndexedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
