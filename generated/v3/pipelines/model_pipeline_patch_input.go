/*
Pipelines

Pipelines represent distinct stages in a workflow, like closing a deal or servicing a support ticket. These endpoints provide access to read and modify pipelines in HubSpot. Pipelines support `deals` and `tickets` object types.  ## Pipeline ID validation  When calling endpoints that take pipelineId as a parameter, that ID must correspond to an existing, un-archived pipeline. Otherwise the request will fail with a `404 Not Found` response.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pipelines

import (
	"encoding/json"
)

// PipelinePatchInput An input used to update some properties on a pipeline definition.
type PipelinePatchInput struct {
	// Whether the pipeline is archived. This property should only be provided when restoring an archived pipeline. If it's provided in any other call, the request will fail and a `400 Bad Request` will be returned.
	Archived *bool `json:"archived,omitempty"`
	// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`
	// A unique label used to organize pipelines in HubSpot's UI
	Label *string `json:"label,omitempty"`
}

// NewPipelinePatchInput instantiates a new PipelinePatchInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelinePatchInput() *PipelinePatchInput {
	this := PipelinePatchInput{}
	return &this
}

// NewPipelinePatchInputWithDefaults instantiates a new PipelinePatchInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelinePatchInputWithDefaults() *PipelinePatchInput {
	this := PipelinePatchInput{}
	return &this
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *PipelinePatchInput) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelinePatchInput) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *PipelinePatchInput) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *PipelinePatchInput) SetArchived(v bool) {
	o.Archived = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *PipelinePatchInput) GetDisplayOrder() int32 {
	if o == nil || o.DisplayOrder == nil {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelinePatchInput) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || o.DisplayOrder == nil {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *PipelinePatchInput) HasDisplayOrder() bool {
	if o != nil && o.DisplayOrder != nil {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *PipelinePatchInput) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PipelinePatchInput) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelinePatchInput) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PipelinePatchInput) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PipelinePatchInput) SetLabel(v string) {
	o.Label = &v
}

func (o PipelinePatchInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.DisplayOrder != nil {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	return json.Marshal(toSerialize)
}

type NullablePipelinePatchInput struct {
	value *PipelinePatchInput
	isSet bool
}

func (v NullablePipelinePatchInput) Get() *PipelinePatchInput {
	return v.value
}

func (v *NullablePipelinePatchInput) Set(val *PipelinePatchInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelinePatchInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelinePatchInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelinePatchInput(val *PipelinePatchInput) *NullablePipelinePatchInput {
	return &NullablePipelinePatchInput{value: val, isSet: true}
}

func (v NullablePipelinePatchInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelinePatchInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
