/*
Timeline events

This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package timeline

import (
	"encoding/json"
)

// StandardError struct for StandardError
type StandardError struct {
	Status      string                 `json:"status"`
	Id          *string                `json:"id,omitempty"`
	Category    ErrorCategory          `json:"category"`
	SubCategory map[string]interface{} `json:"subCategory,omitempty"`
	Message     string                 `json:"message"`
	Errors      []ErrorDetail          `json:"errors"`
	Context     map[string][]string    `json:"context"`
	Links       map[string]string      `json:"links"`
}

// NewStandardError instantiates a new StandardError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardError(status string, category ErrorCategory, message string, errors []ErrorDetail, context map[string][]string, links map[string]string) *StandardError {
	this := StandardError{}
	this.Status = status
	this.Category = category
	this.Message = message
	this.Errors = errors
	this.Context = context
	this.Links = links
	return &this
}

// NewStandardErrorWithDefaults instantiates a new StandardError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardErrorWithDefaults() *StandardError {
	this := StandardError{}
	return &this
}

// GetStatus returns the Status field value
func (o *StandardError) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *StandardError) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *StandardError) SetStatus(v string) {
	o.Status = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StandardError) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardError) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StandardError) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StandardError) SetId(v string) {
	o.Id = &v
}

// GetCategory returns the Category field value
func (o *StandardError) GetCategory() ErrorCategory {
	if o == nil {
		var ret ErrorCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *StandardError) GetCategoryOk() (*ErrorCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *StandardError) SetCategory(v ErrorCategory) {
	o.Category = v
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise.
func (o *StandardError) GetSubCategory() map[string]interface{} {
	if o == nil || o.SubCategory == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SubCategory
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardError) GetSubCategoryOk() (map[string]interface{}, bool) {
	if o == nil || o.SubCategory == nil {
		return nil, false
	}
	return o.SubCategory, true
}

// HasSubCategory returns a boolean if a field has been set.
func (o *StandardError) HasSubCategory() bool {
	if o != nil && o.SubCategory != nil {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given map[string]interface{} and assigns it to the SubCategory field.
func (o *StandardError) SetSubCategory(v map[string]interface{}) {
	o.SubCategory = v
}

// GetMessage returns the Message field value
func (o *StandardError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *StandardError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *StandardError) SetMessage(v string) {
	o.Message = v
}

// GetErrors returns the Errors field value
func (o *StandardError) GetErrors() []ErrorDetail {
	if o == nil {
		var ret []ErrorDetail
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *StandardError) GetErrorsOk() ([]ErrorDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *StandardError) SetErrors(v []ErrorDetail) {
	o.Errors = v
}

// GetContext returns the Context field value
func (o *StandardError) GetContext() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *StandardError) GetContextOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *StandardError) SetContext(v map[string][]string) {
	o.Context = v
}

// GetLinks returns the Links field value
func (o *StandardError) GetLinks() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *StandardError) GetLinksOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *StandardError) SetLinks(v map[string]string) {
	o.Links = v
}

func (o StandardError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["category"] = o.Category
	}
	if o.SubCategory != nil {
		toSerialize["subCategory"] = o.SubCategory
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["errors"] = o.Errors
	}
	if true {
		toSerialize["context"] = o.Context
	}
	if true {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableStandardError struct {
	value *StandardError
	isSet bool
}

func (v NullableStandardError) Get() *StandardError {
	return v.value
}

func (v *NullableStandardError) Set(val *StandardError) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardError) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardError(val *StandardError) *NullableStandardError {
	return &NullableStandardError{value: val, isSet: true}
}

func (v NullableStandardError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
