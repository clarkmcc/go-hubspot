/*
Timeline events

This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package timeline

import (
	"encoding/json"
	"time"
)

// TimelineEventTemplate The current state of the template definition.
type TimelineEventTemplate struct {
	// The template name.
	Name string `json:"name"`
	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.
	HeaderTemplate *string `json:"headerTemplate,omitempty"`
	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.
	DetailTemplate *string `json:"detailTemplate,omitempty"`
	// A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.
	Tokens []TimelineEventTemplateToken `json:"tokens"`
	// The template ID.
	Id string `json:"id"`
	// The type of CRM object this template is for. [Contacts, companies, tickets, and deals] are supported.
	ObjectType string `json:"objectType"`
	// The date and time that the Event Template was created, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The date and time that the Event Template was last updated, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewTimelineEventTemplate instantiates a new TimelineEventTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineEventTemplate(name string, tokens []TimelineEventTemplateToken, id string, objectType string) *TimelineEventTemplate {
	this := TimelineEventTemplate{}
	this.Name = name
	this.Tokens = tokens
	this.Id = id
	this.ObjectType = objectType
	return &this
}

// NewTimelineEventTemplateWithDefaults instantiates a new TimelineEventTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineEventTemplateWithDefaults() *TimelineEventTemplate {
	this := TimelineEventTemplate{}
	return &this
}

// GetName returns the Name field value
func (o *TimelineEventTemplate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TimelineEventTemplate) SetName(v string) {
	o.Name = v
}

// GetHeaderTemplate returns the HeaderTemplate field value if set, zero value otherwise.
func (o *TimelineEventTemplate) GetHeaderTemplate() string {
	if o == nil || o.HeaderTemplate == nil {
		var ret string
		return ret
	}
	return *o.HeaderTemplate
}

// GetHeaderTemplateOk returns a tuple with the HeaderTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetHeaderTemplateOk() (*string, bool) {
	if o == nil || o.HeaderTemplate == nil {
		return nil, false
	}
	return o.HeaderTemplate, true
}

// HasHeaderTemplate returns a boolean if a field has been set.
func (o *TimelineEventTemplate) HasHeaderTemplate() bool {
	if o != nil && o.HeaderTemplate != nil {
		return true
	}

	return false
}

// SetHeaderTemplate gets a reference to the given string and assigns it to the HeaderTemplate field.
func (o *TimelineEventTemplate) SetHeaderTemplate(v string) {
	o.HeaderTemplate = &v
}

// GetDetailTemplate returns the DetailTemplate field value if set, zero value otherwise.
func (o *TimelineEventTemplate) GetDetailTemplate() string {
	if o == nil || o.DetailTemplate == nil {
		var ret string
		return ret
	}
	return *o.DetailTemplate
}

// GetDetailTemplateOk returns a tuple with the DetailTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetDetailTemplateOk() (*string, bool) {
	if o == nil || o.DetailTemplate == nil {
		return nil, false
	}
	return o.DetailTemplate, true
}

// HasDetailTemplate returns a boolean if a field has been set.
func (o *TimelineEventTemplate) HasDetailTemplate() bool {
	if o != nil && o.DetailTemplate != nil {
		return true
	}

	return false
}

// SetDetailTemplate gets a reference to the given string and assigns it to the DetailTemplate field.
func (o *TimelineEventTemplate) SetDetailTemplate(v string) {
	o.DetailTemplate = &v
}

// GetTokens returns the Tokens field value
func (o *TimelineEventTemplate) GetTokens() []TimelineEventTemplateToken {
	if o == nil {
		var ret []TimelineEventTemplateToken
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetTokensOk() ([]TimelineEventTemplateToken, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tokens, true
}

// SetTokens sets field value
func (o *TimelineEventTemplate) SetTokens(v []TimelineEventTemplateToken) {
	o.Tokens = v
}

// GetId returns the Id field value
func (o *TimelineEventTemplate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TimelineEventTemplate) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *TimelineEventTemplate) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *TimelineEventTemplate) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TimelineEventTemplate) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TimelineEventTemplate) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TimelineEventTemplate) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TimelineEventTemplate) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineEventTemplate) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TimelineEventTemplate) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *TimelineEventTemplate) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o TimelineEventTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.HeaderTemplate != nil {
		toSerialize["headerTemplate"] = o.HeaderTemplate
	}
	if o.DetailTemplate != nil {
		toSerialize["detailTemplate"] = o.DetailTemplate
	}
	if true {
		toSerialize["tokens"] = o.Tokens
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableTimelineEventTemplate struct {
	value *TimelineEventTemplate
	isSet bool
}

func (v NullableTimelineEventTemplate) Get() *TimelineEventTemplate {
	return v.value
}

func (v *NullableTimelineEventTemplate) Set(val *TimelineEventTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineEventTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineEventTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineEventTemplate(val *TimelineEventTemplate) *NullableTimelineEventTemplate {
	return &NullableTimelineEventTemplate{value: val, isSet: true}
}

func (v NullableTimelineEventTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineEventTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
