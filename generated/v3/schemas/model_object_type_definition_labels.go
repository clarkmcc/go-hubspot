/*
Schemas

The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemas

import (
	"encoding/json"
)

// ObjectTypeDefinitionLabels Singular and plural labels for the object. Used in CRM display.
type ObjectTypeDefinitionLabels struct {
	// The word for multiple objects. (There’s no way to change this later.)
	Plural *string `json:"plural,omitempty"`
	// The word for one object. (There’s no way to change this later.)
	Singular *string `json:"singular,omitempty"`
}

// NewObjectTypeDefinitionLabels instantiates a new ObjectTypeDefinitionLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectTypeDefinitionLabels() *ObjectTypeDefinitionLabels {
	this := ObjectTypeDefinitionLabels{}
	return &this
}

// NewObjectTypeDefinitionLabelsWithDefaults instantiates a new ObjectTypeDefinitionLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectTypeDefinitionLabelsWithDefaults() *ObjectTypeDefinitionLabels {
	this := ObjectTypeDefinitionLabels{}
	return &this
}

// GetPlural returns the Plural field value if set, zero value otherwise.
func (o *ObjectTypeDefinitionLabels) GetPlural() string {
	if o == nil || o.Plural == nil {
		var ret string
		return ret
	}
	return *o.Plural
}

// GetPluralOk returns a tuple with the Plural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinitionLabels) GetPluralOk() (*string, bool) {
	if o == nil || o.Plural == nil {
		return nil, false
	}
	return o.Plural, true
}

// HasPlural returns a boolean if a field has been set.
func (o *ObjectTypeDefinitionLabels) HasPlural() bool {
	if o != nil && o.Plural != nil {
		return true
	}

	return false
}

// SetPlural gets a reference to the given string and assigns it to the Plural field.
func (o *ObjectTypeDefinitionLabels) SetPlural(v string) {
	o.Plural = &v
}

// GetSingular returns the Singular field value if set, zero value otherwise.
func (o *ObjectTypeDefinitionLabels) GetSingular() string {
	if o == nil || o.Singular == nil {
		var ret string
		return ret
	}
	return *o.Singular
}

// GetSingularOk returns a tuple with the Singular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectTypeDefinitionLabels) GetSingularOk() (*string, bool) {
	if o == nil || o.Singular == nil {
		return nil, false
	}
	return o.Singular, true
}

// HasSingular returns a boolean if a field has been set.
func (o *ObjectTypeDefinitionLabels) HasSingular() bool {
	if o != nil && o.Singular != nil {
		return true
	}

	return false
}

// SetSingular gets a reference to the given string and assigns it to the Singular field.
func (o *ObjectTypeDefinitionLabels) SetSingular(v string) {
	o.Singular = &v
}

func (o ObjectTypeDefinitionLabels) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Plural != nil {
		toSerialize["plural"] = o.Plural
	}
	if o.Singular != nil {
		toSerialize["singular"] = o.Singular
	}
	return json.Marshal(toSerialize)
}

type NullableObjectTypeDefinitionLabels struct {
	value *ObjectTypeDefinitionLabels
	isSet bool
}

func (v NullableObjectTypeDefinitionLabels) Get() *ObjectTypeDefinitionLabels {
	return v.value
}

func (v *NullableObjectTypeDefinitionLabels) Set(val *ObjectTypeDefinitionLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTypeDefinitionLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTypeDefinitionLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTypeDefinitionLabels(val *ObjectTypeDefinitionLabels) *NullableObjectTypeDefinitionLabels {
	return &NullableObjectTypeDefinitionLabels{value: val, isSet: true}
}

func (v NullableObjectTypeDefinitionLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTypeDefinitionLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
