/*
Schemas

The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object's type, properties, and associations. The schema can be uniquely identified by its **object type ID**.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemas

import (
	"encoding/json"
	"time"
)

// ObjectSchema Defines an object schema, including its properties and associations.
type ObjectSchema struct {
	// Associations defined for a given object type.
	Associations []AssociationDefinition `json:"associations"`
	// The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.
	SecondaryDisplayProperties []string `json:"secondaryDisplayProperties,omitempty"`
	ObjectTypeId               *string  `json:"objectTypeId,omitempty"`
	Description                *string  `json:"description,omitempty"`
	// An assigned unique ID for the object, including portal ID and object name.
	FullyQualifiedName *string                    `json:"fullyQualifiedName,omitempty"`
	Labels             ObjectTypeDefinitionLabels `json:"labels"`
	Archived           *bool                      `json:"archived,omitempty"`
	// When the object schema was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The names of properties that should be **required** when creating an object of this type.
	RequiredProperties []string `json:"requiredProperties"`
	// Names of properties that will be indexed for this object type in by HubSpot's product search.
	SearchableProperties []string `json:"searchableProperties,omitempty"`
	// The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.
	PrimaryDisplayProperty *string `json:"primaryDisplayProperty,omitempty"`
	// A unique name for the schema's object type.
	Name string `json:"name"`
	// A unique ID for this schema's object type. Will be defined as {meta-type}-{unique ID}.
	Id string `json:"id"`
	// Properties defined for this object type.
	Properties []Property `json:"properties"`
	// When the object schema was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewObjectSchema instantiates a new ObjectSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSchema(associations []AssociationDefinition, labels ObjectTypeDefinitionLabels, requiredProperties []string, name string, id string, properties []Property) *ObjectSchema {
	this := ObjectSchema{}
	this.Associations = associations
	this.Labels = labels
	this.RequiredProperties = requiredProperties
	this.Name = name
	this.Id = id
	this.Properties = properties
	return &this
}

// NewObjectSchemaWithDefaults instantiates a new ObjectSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSchemaWithDefaults() *ObjectSchema {
	this := ObjectSchema{}
	return &this
}

// GetAssociations returns the Associations field value
func (o *ObjectSchema) GetAssociations() []AssociationDefinition {
	if o == nil {
		var ret []AssociationDefinition
		return ret
	}

	return o.Associations
}

// GetAssociationsOk returns a tuple with the Associations field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetAssociationsOk() ([]AssociationDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Associations, true
}

// SetAssociations sets field value
func (o *ObjectSchema) SetAssociations(v []AssociationDefinition) {
	o.Associations = v
}

// GetSecondaryDisplayProperties returns the SecondaryDisplayProperties field value if set, zero value otherwise.
func (o *ObjectSchema) GetSecondaryDisplayProperties() []string {
	if o == nil || o.SecondaryDisplayProperties == nil {
		var ret []string
		return ret
	}
	return o.SecondaryDisplayProperties
}

// GetSecondaryDisplayPropertiesOk returns a tuple with the SecondaryDisplayProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetSecondaryDisplayPropertiesOk() ([]string, bool) {
	if o == nil || o.SecondaryDisplayProperties == nil {
		return nil, false
	}
	return o.SecondaryDisplayProperties, true
}

// HasSecondaryDisplayProperties returns a boolean if a field has been set.
func (o *ObjectSchema) HasSecondaryDisplayProperties() bool {
	if o != nil && o.SecondaryDisplayProperties != nil {
		return true
	}

	return false
}

// SetSecondaryDisplayProperties gets a reference to the given []string and assigns it to the SecondaryDisplayProperties field.
func (o *ObjectSchema) SetSecondaryDisplayProperties(v []string) {
	o.SecondaryDisplayProperties = v
}

// GetObjectTypeId returns the ObjectTypeId field value if set, zero value otherwise.
func (o *ObjectSchema) GetObjectTypeId() string {
	if o == nil || o.ObjectTypeId == nil {
		var ret string
		return ret
	}
	return *o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetObjectTypeIdOk() (*string, bool) {
	if o == nil || o.ObjectTypeId == nil {
		return nil, false
	}
	return o.ObjectTypeId, true
}

// HasObjectTypeId returns a boolean if a field has been set.
func (o *ObjectSchema) HasObjectTypeId() bool {
	if o != nil && o.ObjectTypeId != nil {
		return true
	}

	return false
}

// SetObjectTypeId gets a reference to the given string and assigns it to the ObjectTypeId field.
func (o *ObjectSchema) SetObjectTypeId(v string) {
	o.ObjectTypeId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ObjectSchema) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ObjectSchema) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ObjectSchema) SetDescription(v string) {
	o.Description = &v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise.
func (o *ObjectSchema) GetFullyQualifiedName() string {
	if o == nil || o.FullyQualifiedName == nil {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil || o.FullyQualifiedName == nil {
		return nil, false
	}
	return o.FullyQualifiedName, true
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *ObjectSchema) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName != nil {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given string and assigns it to the FullyQualifiedName field.
func (o *ObjectSchema) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName = &v
}

// GetLabels returns the Labels field value
func (o *ObjectSchema) GetLabels() ObjectTypeDefinitionLabels {
	if o == nil {
		var ret ObjectTypeDefinitionLabels
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetLabelsOk() (*ObjectTypeDefinitionLabels, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *ObjectSchema) SetLabels(v ObjectTypeDefinitionLabels) {
	o.Labels = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *ObjectSchema) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *ObjectSchema) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *ObjectSchema) SetArchived(v bool) {
	o.Archived = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ObjectSchema) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ObjectSchema) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ObjectSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetRequiredProperties returns the RequiredProperties field value
func (o *ObjectSchema) GetRequiredProperties() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RequiredProperties
}

// GetRequiredPropertiesOk returns a tuple with the RequiredProperties field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetRequiredPropertiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredProperties, true
}

// SetRequiredProperties sets field value
func (o *ObjectSchema) SetRequiredProperties(v []string) {
	o.RequiredProperties = v
}

// GetSearchableProperties returns the SearchableProperties field value if set, zero value otherwise.
func (o *ObjectSchema) GetSearchableProperties() []string {
	if o == nil || o.SearchableProperties == nil {
		var ret []string
		return ret
	}
	return o.SearchableProperties
}

// GetSearchablePropertiesOk returns a tuple with the SearchableProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetSearchablePropertiesOk() ([]string, bool) {
	if o == nil || o.SearchableProperties == nil {
		return nil, false
	}
	return o.SearchableProperties, true
}

// HasSearchableProperties returns a boolean if a field has been set.
func (o *ObjectSchema) HasSearchableProperties() bool {
	if o != nil && o.SearchableProperties != nil {
		return true
	}

	return false
}

// SetSearchableProperties gets a reference to the given []string and assigns it to the SearchableProperties field.
func (o *ObjectSchema) SetSearchableProperties(v []string) {
	o.SearchableProperties = v
}

// GetPrimaryDisplayProperty returns the PrimaryDisplayProperty field value if set, zero value otherwise.
func (o *ObjectSchema) GetPrimaryDisplayProperty() string {
	if o == nil || o.PrimaryDisplayProperty == nil {
		var ret string
		return ret
	}
	return *o.PrimaryDisplayProperty
}

// GetPrimaryDisplayPropertyOk returns a tuple with the PrimaryDisplayProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetPrimaryDisplayPropertyOk() (*string, bool) {
	if o == nil || o.PrimaryDisplayProperty == nil {
		return nil, false
	}
	return o.PrimaryDisplayProperty, true
}

// HasPrimaryDisplayProperty returns a boolean if a field has been set.
func (o *ObjectSchema) HasPrimaryDisplayProperty() bool {
	if o != nil && o.PrimaryDisplayProperty != nil {
		return true
	}

	return false
}

// SetPrimaryDisplayProperty gets a reference to the given string and assigns it to the PrimaryDisplayProperty field.
func (o *ObjectSchema) SetPrimaryDisplayProperty(v string) {
	o.PrimaryDisplayProperty = &v
}

// GetName returns the Name field value
func (o *ObjectSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjectSchema) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *ObjectSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjectSchema) SetId(v string) {
	o.Id = v
}

// GetProperties returns the Properties field value
func (o *ObjectSchema) GetProperties() []Property {
	if o == nil {
		var ret []Property
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetPropertiesOk() ([]Property, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *ObjectSchema) SetProperties(v []Property) {
	o.Properties = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ObjectSchema) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSchema) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ObjectSchema) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ObjectSchema) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ObjectSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["associations"] = o.Associations
	}
	if o.SecondaryDisplayProperties != nil {
		toSerialize["secondaryDisplayProperties"] = o.SecondaryDisplayProperties
	}
	if o.ObjectTypeId != nil {
		toSerialize["objectTypeId"] = o.ObjectTypeId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.FullyQualifiedName != nil {
		toSerialize["fullyQualifiedName"] = o.FullyQualifiedName
	}
	if true {
		toSerialize["labels"] = o.Labels
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["requiredProperties"] = o.RequiredProperties
	}
	if o.SearchableProperties != nil {
		toSerialize["searchableProperties"] = o.SearchableProperties
	}
	if o.PrimaryDisplayProperty != nil {
		toSerialize["primaryDisplayProperty"] = o.PrimaryDisplayProperty
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableObjectSchema struct {
	value *ObjectSchema
	isSet bool
}

func (v NullableObjectSchema) Get() *ObjectSchema {
	return v.value
}

func (v *NullableObjectSchema) Set(val *ObjectSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSchema(val *ObjectSchema) *NullableObjectSchema {
	return &NullableObjectSchema{value: val, isSet: true}
}

func (v NullableObjectSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
