/*
CMS Source Code

Endpoints for interacting with files in the CMS Developer File System. These files include HTML templates, CSS, JS, modules, and other assets which are used to create CMS content.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package source_code

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"

	"github.com/clarkmcc/go-hubspot"
	"net/url"
	"strings"
)

// SourceCodeExtractApiService SourceCodeExtractApi service
type SourceCodeExtractApiService service

type ApiGetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusRequest struct {
	ctx        context.Context
	ApiService *SourceCodeExtractApiService
	taskId     int32
}

func (r ApiGetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusRequest) Execute() (*ActionResponse, *http.Response, error) {
	return r.ApiService.GetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusExecute(r)
}

/*
GetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatus Method for GetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId
 @return ApiGetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusRequest
*/
func (a *SourceCodeExtractApiService) GetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatus(ctx context.Context, taskId int32) ApiGetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusRequest {
	return ApiGetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusRequest{
		ApiService: a,
		ctx:        ctx,
		taskId:     taskId,
	}
}

// Execute executes the request
//  @return ActionResponse
func (a *SourceCodeExtractApiService) GetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusExecute(r ApiGetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatusRequest) (*ActionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceCodeExtractApiService.GetCmsV3SourceCodeExtractAsyncTasksTaskIdStatusGetAsyncStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/source-code/extract/async/tasks/{taskId}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest struct {
	ctx                context.Context
	ApiService         *SourceCodeExtractApiService
	fileExtractRequest *FileExtractRequest
}

func (r ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest) FileExtractRequest(fileExtractRequest FileExtractRequest) ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest {
	r.fileExtractRequest = &fileExtractRequest
	return r
}

func (r ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest) Execute() (*TaskLocator, *http.Response, error) {
	return r.ApiService.PostCmsV3SourceCodeExtractAsyncDoAsyncExecute(r)
}

/*
PostCmsV3SourceCodeExtractAsyncDoAsync Method for PostCmsV3SourceCodeExtractAsyncDoAsync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest
*/
func (a *SourceCodeExtractApiService) PostCmsV3SourceCodeExtractAsyncDoAsync(ctx context.Context) ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest {
	return ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return TaskLocator
func (a *SourceCodeExtractApiService) PostCmsV3SourceCodeExtractAsyncDoAsyncExecute(r ApiPostCmsV3SourceCodeExtractAsyncDoAsyncRequest) (*TaskLocator, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaskLocator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceCodeExtractApiService.PostCmsV3SourceCodeExtractAsyncDoAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/source-code/extract/async"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fileExtractRequest == nil {
		return localVarReturnValue, nil, reportError("fileExtractRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileExtractRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
