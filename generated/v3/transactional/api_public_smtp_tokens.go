/*
Transactional Email

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transactional

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PublicSmtpTokensApiService PublicSmtpTokensApi service
type PublicSmtpTokensApiService service

type ApiDeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenRequest struct {
	ctx        context.Context
	ApiService *PublicSmtpTokensApiService
	tokenId    string
}

func (r ApiDeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenExecute(r)
}

/*
DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken Delete a single token by ID.

Delete a single token by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tokenId Identifier generated when a token is created.
 @return ApiDeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenRequest
*/
func (a *PublicSmtpTokensApiService) DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken(ctx context.Context, tokenId string) ApiDeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenRequest {
	return ApiDeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenRequest{
		ApiService: a,
		ctx:        ctx,
		tokenId:    tokenId,
	}
}

// Execute executes the request
func (a *PublicSmtpTokensApiService) DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenExecute(r ApiDeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicSmtpTokensApiService.DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/transactional/smtp-tokens/{tokenId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tokenId"+"}", url.PathEscape(parameterToString(r.tokenId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest struct {
	ctx             context.Context
	ApiService      *PublicSmtpTokensApiService
	campaignName    *string
	emailCampaignId *string
	after           *string
	limit           *int32
}

// A name for the campaign tied to the SMTP API token.
func (r ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest) CampaignName(campaignName string) ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest {
	r.campaignName = &campaignName
	return r
}

// Identifier assigned to the campaign provided during the token creation.
func (r ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest) EmailCampaignId(emailCampaignId string) ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest {
	r.emailCampaignId = &emailCampaignId
	return r
}

// Starting point to get the next set of results.
func (r ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest) After(after string) ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest {
	r.after = &after
	return r
}

// Maximum number of tokens to return.
func (r ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest) Limit(limit int32) ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest {
	r.limit = &limit
	return r
}

func (r ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest) Execute() (*CollectionResponseSmtpApiTokenViewForwardPaging, *http.Response, error) {
	return r.ApiService.GetMarketingV3TransactionalSmtpTokensGetTokensPageExecute(r)
}

/*
GetMarketingV3TransactionalSmtpTokensGetTokensPage Query SMTP API tokens by campaign name or an emailCampaignId.

Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest
*/
func (a *PublicSmtpTokensApiService) GetMarketingV3TransactionalSmtpTokensGetTokensPage(ctx context.Context) ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest {
	return ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return CollectionResponseSmtpApiTokenViewForwardPaging
func (a *PublicSmtpTokensApiService) GetMarketingV3TransactionalSmtpTokensGetTokensPageExecute(r ApiGetMarketingV3TransactionalSmtpTokensGetTokensPageRequest) (*CollectionResponseSmtpApiTokenViewForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponseSmtpApiTokenViewForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicSmtpTokensApiService.GetMarketingV3TransactionalSmtpTokensGetTokensPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/transactional/smtp-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.campaignName != nil {
		localVarQueryParams.Add("campaignName", parameterToString(*r.campaignName, ""))
	}
	if r.emailCampaignId != nil {
		localVarQueryParams.Add("emailCampaignId", parameterToString(*r.emailCampaignId, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdRequest struct {
	ctx        context.Context
	ApiService *PublicSmtpTokensApiService
	tokenId    string
}

func (r ApiGetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdRequest) Execute() (*SmtpApiTokenView, *http.Response, error) {
	return r.ApiService.GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdExecute(r)
}

/*
GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById Query a single token by ID.

Query a single token by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tokenId Identifier generated when a token is created.
 @return ApiGetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdRequest
*/
func (a *PublicSmtpTokensApiService) GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById(ctx context.Context, tokenId string) ApiGetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdRequest {
	return ApiGetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdRequest{
		ApiService: a,
		ctx:        ctx,
		tokenId:    tokenId,
	}
}

// Execute executes the request
//  @return SmtpApiTokenView
func (a *PublicSmtpTokensApiService) GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdExecute(r ApiGetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdRequest) (*SmtpApiTokenView, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SmtpApiTokenView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicSmtpTokensApiService.GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/transactional/smtp-tokens/{tokenId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tokenId"+"}", url.PathEscape(parameterToString(r.tokenId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest struct {
	ctx                    context.Context
	ApiService             *PublicSmtpTokensApiService
	smtpApiTokenRequestEgg *SmtpApiTokenRequestEgg
}

// A request object that includes the campaign name tied to the token and whether contacts should be created for email recipients.
func (r ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest) SmtpApiTokenRequestEgg(smtpApiTokenRequestEgg SmtpApiTokenRequestEgg) ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest {
	r.smtpApiTokenRequestEgg = &smtpApiTokenRequestEgg
	return r
}

func (r ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest) Execute() (*SmtpApiTokenView, *http.Response, error) {
	return r.ApiService.PostMarketingV3TransactionalSmtpTokensCreateTokenExecute(r)
}

/*
PostMarketingV3TransactionalSmtpTokensCreateToken Create a SMTP API token.

Create a SMTP API token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest
*/
func (a *PublicSmtpTokensApiService) PostMarketingV3TransactionalSmtpTokensCreateToken(ctx context.Context) ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest {
	return ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return SmtpApiTokenView
func (a *PublicSmtpTokensApiService) PostMarketingV3TransactionalSmtpTokensCreateTokenExecute(r ApiPostMarketingV3TransactionalSmtpTokensCreateTokenRequest) (*SmtpApiTokenView, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SmtpApiTokenView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicSmtpTokensApiService.PostMarketingV3TransactionalSmtpTokensCreateToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/transactional/smtp-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smtpApiTokenRequestEgg == nil {
		return localVarReturnValue, nil, reportError("smtpApiTokenRequestEgg is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smtpApiTokenRequestEgg
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordRequest struct {
	ctx        context.Context
	ApiService *PublicSmtpTokensApiService
	tokenId    string
}

func (r ApiPostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordRequest) Execute() (*SmtpApiTokenView, *http.Response, error) {
	return r.ApiService.PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordExecute(r)
}

/*
PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword Reset the password of an existing token.

Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tokenId Identifier generated when a token is created.
 @return ApiPostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordRequest
*/
func (a *PublicSmtpTokensApiService) PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword(ctx context.Context, tokenId string) ApiPostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordRequest {
	return ApiPostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordRequest{
		ApiService: a,
		ctx:        ctx,
		tokenId:    tokenId,
	}
}

// Execute executes the request
//  @return SmtpApiTokenView
func (a *PublicSmtpTokensApiService) PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordExecute(r ApiPostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordRequest) (*SmtpApiTokenView, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SmtpApiTokenView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicSmtpTokensApiService.PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/v3/transactional/smtp-tokens/{tokenId}/password-reset"
	localVarPath = strings.Replace(localVarPath, "{"+"tokenId"+"}", url.PathEscape(parameterToString(r.tokenId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
