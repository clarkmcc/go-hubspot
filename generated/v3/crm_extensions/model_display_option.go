/*
CRM cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_extensions

import (
	"encoding/json"
)

// DisplayOption Option definition for STATUS dataTypes.
type DisplayOption struct {
	// JSON-friendly unique name for option.
	Name string `json:"name"`
	// The text that will be displayed to users for this option.
	Label string `json:"label"`
	// The type of status.
	Type string `json:"type"`
}

// NewDisplayOption instantiates a new DisplayOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayOption(name string, label string, type_ string) *DisplayOption {
	this := DisplayOption{}
	this.Name = name
	this.Label = label
	this.Type = type_
	return &this
}

// NewDisplayOptionWithDefaults instantiates a new DisplayOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayOptionWithDefaults() *DisplayOption {
	this := DisplayOption{}
	return &this
}

// GetName returns the Name field value
func (o *DisplayOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DisplayOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DisplayOption) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value
func (o *DisplayOption) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *DisplayOption) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *DisplayOption) SetLabel(v string) {
	o.Label = v
}

// GetType returns the Type field value
func (o *DisplayOption) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DisplayOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DisplayOption) SetType(v string) {
	o.Type = v
}

func (o DisplayOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableDisplayOption struct {
	value *DisplayOption
	isSet bool
}

func (v NullableDisplayOption) Get() *DisplayOption {
	return v.value
}

func (v *NullableDisplayOption) Set(val *DisplayOption) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayOption) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayOption(val *DisplayOption) *NullableDisplayOption {
	return &NullableDisplayOption{value: val, isSet: true}
}

func (v NullableDisplayOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
