/*
CRM cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_extensions

import (
	"encoding/json"
)

// CardActions Configuration for custom user actions on cards.
type CardActions struct {
	// A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.
	BaseUrls []string `json:"baseUrls"`
}

// NewCardActions instantiates a new CardActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardActions(baseUrls []string) *CardActions {
	this := CardActions{}
	this.BaseUrls = baseUrls
	return &this
}

// NewCardActionsWithDefaults instantiates a new CardActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardActionsWithDefaults() *CardActions {
	this := CardActions{}
	return &this
}

// GetBaseUrls returns the BaseUrls field value
func (o *CardActions) GetBaseUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BaseUrls
}

// GetBaseUrlsOk returns a tuple with the BaseUrls field value
// and a boolean to check if the value has been set.
func (o *CardActions) GetBaseUrlsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseUrls, true
}

// SetBaseUrls sets field value
func (o *CardActions) SetBaseUrls(v []string) {
	o.BaseUrls = v
}

func (o CardActions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["baseUrls"] = o.BaseUrls
	}
	return json.Marshal(toSerialize)
}

type NullableCardActions struct {
	value *CardActions
	isSet bool
}

func (v NullableCardActions) Get() *CardActions {
	return v.value
}

func (v *NullableCardActions) Set(val *CardActions) {
	v.value = val
	v.isSet = true
}

func (v NullableCardActions) IsSet() bool {
	return v.isSet
}

func (v *NullableCardActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardActions(val *CardActions) *NullableCardActions {
	return &NullableCardActions{value: val, isSet: true}
}

func (v NullableCardActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
