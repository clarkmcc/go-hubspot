/*
CRM cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_extensions

import (
	"encoding/json"
)

// ObjectToken struct for ObjectToken
type ObjectToken struct {
	Name     *string `json:"name,omitempty"`
	Label    *string `json:"label,omitempty"`
	DataType *string `json:"dataType,omitempty"`
	Value    string  `json:"value"`
}

// NewObjectToken instantiates a new ObjectToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectToken(value string) *ObjectToken {
	this := ObjectToken{}
	this.Value = value
	return &this
}

// NewObjectTokenWithDefaults instantiates a new ObjectToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectTokenWithDefaults() *ObjectToken {
	this := ObjectToken{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjectToken) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectToken) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjectToken) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjectToken) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ObjectToken) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectToken) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ObjectToken) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ObjectToken) SetLabel(v string) {
	o.Label = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ObjectToken) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectToken) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ObjectToken) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *ObjectToken) SetDataType(v string) {
	o.DataType = &v
}

// GetValue returns the Value field value
func (o *ObjectToken) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ObjectToken) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ObjectToken) SetValue(v string) {
	o.Value = v
}

func (o ObjectToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.DataType != nil {
		toSerialize["dataType"] = o.DataType
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableObjectToken struct {
	value *ObjectToken
	isSet bool
}

func (v NullableObjectToken) Get() *ObjectToken {
	return v.value
}

func (v *NullableObjectToken) Set(val *ObjectToken) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectToken) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectToken(val *ObjectToken) *NullableObjectToken {
	return &NullableObjectToken{value: val, isSet: true}
}

func (v NullableObjectToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
