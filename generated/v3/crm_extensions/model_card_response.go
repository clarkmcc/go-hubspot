/*
CRM cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_extensions

import (
	"encoding/json"
	"time"
)

// CardResponse Current state of Card Definition
type CardResponse struct {
	// Generated unique ID for card.
	Id string `json:"id"`
	// When this card was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The last time this card was updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Displayed title of this card.
	Title   string          `json:"title"`
	Fetch   CardFetchBody   `json:"fetch"`
	Display CardDisplayBody `json:"display"`
	Actions CardActions     `json:"actions"`
}

// NewCardResponse instantiates a new CardResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardResponse(id string, title string, fetch CardFetchBody, display CardDisplayBody, actions CardActions) *CardResponse {
	this := CardResponse{}
	this.Id = id
	this.Title = title
	this.Fetch = fetch
	this.Display = display
	this.Actions = actions
	return &this
}

// NewCardResponseWithDefaults instantiates a new CardResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardResponseWithDefaults() *CardResponse {
	this := CardResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CardResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CardResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CardResponse) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CardResponse) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CardResponse) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CardResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CardResponse) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CardResponse) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CardResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetTitle returns the Title field value
func (o *CardResponse) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CardResponse) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CardResponse) SetTitle(v string) {
	o.Title = v
}

// GetFetch returns the Fetch field value
func (o *CardResponse) GetFetch() CardFetchBody {
	if o == nil {
		var ret CardFetchBody
		return ret
	}

	return o.Fetch
}

// GetFetchOk returns a tuple with the Fetch field value
// and a boolean to check if the value has been set.
func (o *CardResponse) GetFetchOk() (*CardFetchBody, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fetch, true
}

// SetFetch sets field value
func (o *CardResponse) SetFetch(v CardFetchBody) {
	o.Fetch = v
}

// GetDisplay returns the Display field value
func (o *CardResponse) GetDisplay() CardDisplayBody {
	if o == nil {
		var ret CardDisplayBody
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *CardResponse) GetDisplayOk() (*CardDisplayBody, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *CardResponse) SetDisplay(v CardDisplayBody) {
	o.Display = v
}

// GetActions returns the Actions field value
func (o *CardResponse) GetActions() CardActions {
	if o == nil {
		var ret CardActions
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *CardResponse) GetActionsOk() (*CardActions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actions, true
}

// SetActions sets field value
func (o *CardResponse) SetActions(v CardActions) {
	o.Actions = v
}

func (o CardResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["fetch"] = o.Fetch
	}
	if true {
		toSerialize["display"] = o.Display
	}
	if true {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullableCardResponse struct {
	value *CardResponse
	isSet bool
}

func (v NullableCardResponse) Get() *CardResponse {
	return v.value
}

func (v *NullableCardResponse) Set(val *CardResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCardResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCardResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardResponse(val *CardResponse) *NullableCardResponse {
	return &NullableCardResponse{value: val, isSet: true}
}

func (v NullableCardResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
