/*
CRM cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_extensions

import (
	"encoding/json"
)

// IntegratorObjectResult struct for IntegratorObjectResult
type IntegratorObjectResult struct {
	Id      string                               `json:"id"`
	Title   string                               `json:"title"`
	LinkUrl *string                              `json:"linkUrl,omitempty"`
	Tokens  []ObjectToken                        `json:"tokens"`
	Actions []IntegratorObjectResultActionsInner `json:"actions"`
}

// NewIntegratorObjectResult instantiates a new IntegratorObjectResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegratorObjectResult(id string, title string, tokens []ObjectToken, actions []IntegratorObjectResultActionsInner) *IntegratorObjectResult {
	this := IntegratorObjectResult{}
	this.Id = id
	this.Title = title
	this.Tokens = tokens
	this.Actions = actions
	return &this
}

// NewIntegratorObjectResultWithDefaults instantiates a new IntegratorObjectResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegratorObjectResultWithDefaults() *IntegratorObjectResult {
	this := IntegratorObjectResult{}
	return &this
}

// GetId returns the Id field value
func (o *IntegratorObjectResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntegratorObjectResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IntegratorObjectResult) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *IntegratorObjectResult) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *IntegratorObjectResult) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *IntegratorObjectResult) SetTitle(v string) {
	o.Title = v
}

// GetLinkUrl returns the LinkUrl field value if set, zero value otherwise.
func (o *IntegratorObjectResult) GetLinkUrl() string {
	if o == nil || o.LinkUrl == nil {
		var ret string
		return ret
	}
	return *o.LinkUrl
}

// GetLinkUrlOk returns a tuple with the LinkUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorObjectResult) GetLinkUrlOk() (*string, bool) {
	if o == nil || o.LinkUrl == nil {
		return nil, false
	}
	return o.LinkUrl, true
}

// HasLinkUrl returns a boolean if a field has been set.
func (o *IntegratorObjectResult) HasLinkUrl() bool {
	if o != nil && o.LinkUrl != nil {
		return true
	}

	return false
}

// SetLinkUrl gets a reference to the given string and assigns it to the LinkUrl field.
func (o *IntegratorObjectResult) SetLinkUrl(v string) {
	o.LinkUrl = &v
}

// GetTokens returns the Tokens field value
func (o *IntegratorObjectResult) GetTokens() []ObjectToken {
	if o == nil {
		var ret []ObjectToken
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *IntegratorObjectResult) GetTokensOk() ([]ObjectToken, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tokens, true
}

// SetTokens sets field value
func (o *IntegratorObjectResult) SetTokens(v []ObjectToken) {
	o.Tokens = v
}

// GetActions returns the Actions field value
func (o *IntegratorObjectResult) GetActions() []IntegratorObjectResultActionsInner {
	if o == nil {
		var ret []IntegratorObjectResultActionsInner
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *IntegratorObjectResult) GetActionsOk() ([]IntegratorObjectResultActionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *IntegratorObjectResult) SetActions(v []IntegratorObjectResultActionsInner) {
	o.Actions = v
}

func (o IntegratorObjectResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if o.LinkUrl != nil {
		toSerialize["linkUrl"] = o.LinkUrl
	}
	if true {
		toSerialize["tokens"] = o.Tokens
	}
	if true {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullableIntegratorObjectResult struct {
	value *IntegratorObjectResult
	isSet bool
}

func (v NullableIntegratorObjectResult) Get() *IntegratorObjectResult {
	return v.value
}

func (v *NullableIntegratorObjectResult) Set(val *IntegratorObjectResult) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegratorObjectResult) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegratorObjectResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegratorObjectResult(val *IntegratorObjectResult) *NullableIntegratorObjectResult {
	return &NullableIntegratorObjectResult{value: val, isSet: true}
}

func (v NullableIntegratorObjectResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegratorObjectResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
