/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
)

// AccountingExtensionTerm Representation of payment terms that are defined in the external accounting system. One of 'dueDays' or 'dueDate' is required.
type AccountingExtensionTerm struct {
	// The due date for payment of the invoice, in ISO-8601 date format (yyyy-MM-dd)
	DueDate *string `json:"dueDate,omitempty"`
	// The display name of the payment terms.
	Name string `json:"name"`
	// The ID of the payment terms in the external accounting system.
	Id string `json:"id"`
	// The number of days that these payment terms represent.
	DueDays *int32 `json:"dueDays,omitempty"`
}

// NewAccountingExtensionTerm instantiates a new AccountingExtensionTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountingExtensionTerm(name string, id string) *AccountingExtensionTerm {
	this := AccountingExtensionTerm{}
	this.Name = name
	this.Id = id
	return &this
}

// NewAccountingExtensionTermWithDefaults instantiates a new AccountingExtensionTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountingExtensionTermWithDefaults() *AccountingExtensionTerm {
	this := AccountingExtensionTerm{}
	return &this
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *AccountingExtensionTerm) GetDueDate() string {
	if o == nil || o.DueDate == nil {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingExtensionTerm) GetDueDateOk() (*string, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *AccountingExtensionTerm) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *AccountingExtensionTerm) SetDueDate(v string) {
	o.DueDate = &v
}

// GetName returns the Name field value
func (o *AccountingExtensionTerm) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountingExtensionTerm) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountingExtensionTerm) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *AccountingExtensionTerm) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountingExtensionTerm) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountingExtensionTerm) SetId(v string) {
	o.Id = v
}

// GetDueDays returns the DueDays field value if set, zero value otherwise.
func (o *AccountingExtensionTerm) GetDueDays() int32 {
	if o == nil || o.DueDays == nil {
		var ret int32
		return ret
	}
	return *o.DueDays
}

// GetDueDaysOk returns a tuple with the DueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingExtensionTerm) GetDueDaysOk() (*int32, bool) {
	if o == nil || o.DueDays == nil {
		return nil, false
	}
	return o.DueDays, true
}

// HasDueDays returns a boolean if a field has been set.
func (o *AccountingExtensionTerm) HasDueDays() bool {
	if o != nil && o.DueDays != nil {
		return true
	}

	return false
}

// SetDueDays gets a reference to the given int32 and assigns it to the DueDays field.
func (o *AccountingExtensionTerm) SetDueDays(v int32) {
	o.DueDays = &v
}

func (o AccountingExtensionTerm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DueDate != nil {
		toSerialize["dueDate"] = o.DueDate
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.DueDays != nil {
		toSerialize["dueDays"] = o.DueDays
	}
	return json.Marshal(toSerialize)
}

type NullableAccountingExtensionTerm struct {
	value *AccountingExtensionTerm
	isSet bool
}

func (v NullableAccountingExtensionTerm) Get() *AccountingExtensionTerm {
	return v.value
}

func (v *NullableAccountingExtensionTerm) Set(val *AccountingExtensionTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountingExtensionTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountingExtensionTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountingExtensionTerm(val *AccountingExtensionTerm) *NullableAccountingExtensionTerm {
	return &NullableAccountingExtensionTerm{value: val, isSet: true}
}

func (v NullableAccountingExtensionTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountingExtensionTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
