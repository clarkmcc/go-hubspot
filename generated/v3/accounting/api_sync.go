/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"

	"github.com/clarkmcc/go-hubspot"
	"net/url"
	"strings"
)

// SyncApiService SyncApi service
type SyncApiService service

type ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest struct {
	ctx                 context.Context
	ApiService          *SyncApiService
	appId               int32
	syncContactsRequest *SyncContactsRequest
}

func (r ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest) SyncContactsRequest(syncContactsRequest SyncContactsRequest) ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest {
	r.syncContactsRequest = &syncContactsRequest
	return r
}

func (r ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest) Execute() (*ActionResponse, *http.Response, error) {
	return r.ApiService.PostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactExecute(r)
}

/*
PostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContact Import contacts

Imports contacts' properties from an external accounting system to HubSpot. Import details, including property mappings, must be configured previously in HubSpot infrastructure.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.
 @return ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest
*/
func (a *SyncApiService) PostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContact(ctx context.Context, appId int32) ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest {
	return ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest{
		ApiService: a,
		ctx:        ctx,
		appId:      appId,
	}
}

// Execute executes the request
//  @return ActionResponse
func (a *SyncApiService) PostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactExecute(r ApiPostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContactRequest) (*ActionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyncApiService.PostCrmV3ExtensionsAccountingSyncAppIdContactsCreateContact")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/accounting/sync/{appId}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterToString(r.appId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.syncContactsRequest == nil {
		return localVarReturnValue, nil, reportError("syncContactsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.syncContactsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest struct {
	ctx                 context.Context
	ApiService          *SyncApiService
	appId               int32
	syncProductsRequest *SyncProductsRequest
}

func (r ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest) SyncProductsRequest(syncProductsRequest SyncProductsRequest) ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest {
	r.syncProductsRequest = &syncProductsRequest
	return r
}

func (r ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest) Execute() (*ActionResponse, *http.Response, error) {
	return r.ApiService.PostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductExecute(r)
}

/*
PostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProduct Import products

Imports products' properties from an external accounting system to HubSpot. Import details, including property mappings, must be configured previously in HubSpot infrastructure.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.
 @return ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest
*/
func (a *SyncApiService) PostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProduct(ctx context.Context, appId int32) ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest {
	return ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest{
		ApiService: a,
		ctx:        ctx,
		appId:      appId,
	}
}

// Execute executes the request
//  @return ActionResponse
func (a *SyncApiService) PostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductExecute(r ApiPostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProductRequest) (*ActionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyncApiService.PostCrmV3ExtensionsAccountingSyncAppIdProductsCreateProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/crm/v3/extensions/accounting/sync/{appId}/products"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterToString(r.appId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.syncProductsRequest == nil {
		return localVarReturnValue, nil, reportError("syncProductsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.syncProductsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
