/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
)

// Tax Representation of a tax defined in the external accounting system.
type Tax struct {
	// The code/ID of the tax in the external accounting system.
	Code string `json:"code"`
	// The tax percentage.  For example, 8.05 represents a 8.05% tax rate.
	Percentage float32 `json:"percentage"`
	// The display name of the tax.
	Name string `json:"name"`
}

// NewTax instantiates a new Tax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTax(code string, percentage float32, name string) *Tax {
	this := Tax{}
	this.Code = code
	this.Percentage = percentage
	this.Name = name
	return &this
}

// NewTaxWithDefaults instantiates a new Tax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxWithDefaults() *Tax {
	this := Tax{}
	return &this
}

// GetCode returns the Code field value
func (o *Tax) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Tax) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Tax) SetCode(v string) {
	o.Code = v
}

// GetPercentage returns the Percentage field value
func (o *Tax) GetPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *Tax) GetPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *Tax) SetPercentage(v float32) {
	o.Percentage = v
}

// GetName returns the Name field value
func (o *Tax) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tax) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tax) SetName(v string) {
	o.Name = v
}

func (o Tax) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["percentage"] = o.Percentage
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableTax struct {
	value *Tax
	isSet bool
}

func (v NullableTax) Get() *Tax {
	return v.value
}

func (v *NullableTax) Set(val *Tax) {
	v.value = val
	v.isSet = true
}

func (v NullableTax) IsSet() bool {
	return v.isSet
}

func (v *NullableTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTax(val *Tax) *NullableTax {
	return &NullableTax{value: val, isSet: true}
}

func (v NullableTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
