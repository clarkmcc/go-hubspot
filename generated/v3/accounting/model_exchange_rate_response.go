/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
)

// ExchangeRateResponse A response to the request for an exchange rate value. It represents the exchange rate from the source currency to the target currency.
type ExchangeRateResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result string `json:"@result"`
	// The exchange rate between the 2 currencies
	ExchangeRate float32 `json:"exchangeRate"`
	// The ISO 4217 currency code that represents the source currency of the exchange rate.
	SourceCurrencyCode string `json:"sourceCurrencyCode"`
	// The ISO 4217 currency code that represents the target currency of the exchange rate.
	TargetCurrencyCode string `json:"targetCurrencyCode"`
}

// NewExchangeRateResponse instantiates a new ExchangeRateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRateResponse(result string, exchangeRate float32, sourceCurrencyCode string, targetCurrencyCode string) *ExchangeRateResponse {
	this := ExchangeRateResponse{}
	this.Result = result
	this.ExchangeRate = exchangeRate
	this.SourceCurrencyCode = sourceCurrencyCode
	this.TargetCurrencyCode = targetCurrencyCode
	return &this
}

// NewExchangeRateResponseWithDefaults instantiates a new ExchangeRateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateResponseWithDefaults() *ExchangeRateResponse {
	this := ExchangeRateResponse{}
	return &this
}

// GetResult returns the Result field value
func (o *ExchangeRateResponse) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *ExchangeRateResponse) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *ExchangeRateResponse) SetResult(v string) {
	o.Result = v
}

// GetExchangeRate returns the ExchangeRate field value
func (o *ExchangeRateResponse) GetExchangeRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value
// and a boolean to check if the value has been set.
func (o *ExchangeRateResponse) GetExchangeRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeRate, true
}

// SetExchangeRate sets field value
func (o *ExchangeRateResponse) SetExchangeRate(v float32) {
	o.ExchangeRate = v
}

// GetSourceCurrencyCode returns the SourceCurrencyCode field value
func (o *ExchangeRateResponse) GetSourceCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceCurrencyCode
}

// GetSourceCurrencyCodeOk returns a tuple with the SourceCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *ExchangeRateResponse) GetSourceCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceCurrencyCode, true
}

// SetSourceCurrencyCode sets field value
func (o *ExchangeRateResponse) SetSourceCurrencyCode(v string) {
	o.SourceCurrencyCode = v
}

// GetTargetCurrencyCode returns the TargetCurrencyCode field value
func (o *ExchangeRateResponse) GetTargetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetCurrencyCode
}

// GetTargetCurrencyCodeOk returns a tuple with the TargetCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *ExchangeRateResponse) GetTargetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetCurrencyCode, true
}

// SetTargetCurrencyCode sets field value
func (o *ExchangeRateResponse) SetTargetCurrencyCode(v string) {
	o.TargetCurrencyCode = v
}

func (o ExchangeRateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["@result"] = o.Result
	}
	if true {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if true {
		toSerialize["sourceCurrencyCode"] = o.SourceCurrencyCode
	}
	if true {
		toSerialize["targetCurrencyCode"] = o.TargetCurrencyCode
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeRateResponse struct {
	value *ExchangeRateResponse
	isSet bool
}

func (v NullableExchangeRateResponse) Get() *ExchangeRateResponse {
	return v.value
}

func (v *NullableExchangeRateResponse) Set(val *ExchangeRateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRateResponse(val *ExchangeRateResponse) *NullableExchangeRateResponse {
	return &NullableExchangeRateResponse{value: val, isSet: true}
}

func (v NullableExchangeRateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
