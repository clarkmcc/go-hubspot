/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
	"time"
)

// UpdatedProduct A request to import external accounting product properties in HubSpot
type UpdatedProduct struct {
	// The operation to be performed.
	SyncAction string `json:"syncAction"`
	// The timestamp (ISO8601 format) when the product was updated in the external accounting system.
	UpdatedAt time.Time `json:"updatedAt"`
	// The price of the product.
	Price float32 `json:"price"`
	// The ISO 4217 currency code that represents the currency of the product price.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// The ID of the product in the external accounting system.
	Id string `json:"id"`
	// A map of key-value product properties to be imported.
	Properties map[string]string `json:"properties"`
}

// NewUpdatedProduct instantiates a new UpdatedProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatedProduct(syncAction string, updatedAt time.Time, price float32, id string, properties map[string]string) *UpdatedProduct {
	this := UpdatedProduct{}
	this.SyncAction = syncAction
	this.UpdatedAt = updatedAt
	this.Price = price
	this.Id = id
	this.Properties = properties
	return &this
}

// NewUpdatedProductWithDefaults instantiates a new UpdatedProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatedProductWithDefaults() *UpdatedProduct {
	this := UpdatedProduct{}
	return &this
}

// GetSyncAction returns the SyncAction field value
func (o *UpdatedProduct) GetSyncAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SyncAction
}

// GetSyncActionOk returns a tuple with the SyncAction field value
// and a boolean to check if the value has been set.
func (o *UpdatedProduct) GetSyncActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncAction, true
}

// SetSyncAction sets field value
func (o *UpdatedProduct) SetSyncAction(v string) {
	o.SyncAction = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *UpdatedProduct) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *UpdatedProduct) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *UpdatedProduct) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetPrice returns the Price field value
func (o *UpdatedProduct) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *UpdatedProduct) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *UpdatedProduct) SetPrice(v float32) {
	o.Price = v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *UpdatedProduct) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatedProduct) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *UpdatedProduct) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *UpdatedProduct) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetId returns the Id field value
func (o *UpdatedProduct) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdatedProduct) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdatedProduct) SetId(v string) {
	o.Id = v
}

// GetProperties returns the Properties field value
func (o *UpdatedProduct) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *UpdatedProduct) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *UpdatedProduct) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o UpdatedProduct) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["syncAction"] = o.SyncAction
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if o.CurrencyCode != nil {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableUpdatedProduct struct {
	value *UpdatedProduct
	isSet bool
}

func (v NullableUpdatedProduct) Get() *UpdatedProduct {
	return v.value
}

func (v *NullableUpdatedProduct) Set(val *UpdatedProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatedProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatedProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatedProduct(val *UpdatedProduct) *NullableUpdatedProduct {
	return &NullableUpdatedProduct{value: val, isSet: true}
}

func (v NullableUpdatedProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatedProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
