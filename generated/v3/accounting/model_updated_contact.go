/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
	"time"
)

// UpdatedContact A request to import external accounting contact properties in HubSpot
type UpdatedContact struct {
	// The operation to be performed.
	SyncAction string `json:"syncAction"`
	// The timestamp (ISO8601 format) when the customer was updated in the external accounting system.
	UpdatedAt time.Time `json:"updatedAt"`
	// The customer's email address
	EmailAddress string `json:"emailAddress"`
	// The ID of the customer in the external accounting system.
	Id string `json:"id"`
	// Designates the type of the customer object.
	CustomerType *string `json:"customerType,omitempty"`
}

// NewUpdatedContact instantiates a new UpdatedContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatedContact(syncAction string, updatedAt time.Time, emailAddress string, id string) *UpdatedContact {
	this := UpdatedContact{}
	this.SyncAction = syncAction
	this.UpdatedAt = updatedAt
	this.EmailAddress = emailAddress
	this.Id = id
	return &this
}

// NewUpdatedContactWithDefaults instantiates a new UpdatedContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatedContactWithDefaults() *UpdatedContact {
	this := UpdatedContact{}
	return &this
}

// GetSyncAction returns the SyncAction field value
func (o *UpdatedContact) GetSyncAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SyncAction
}

// GetSyncActionOk returns a tuple with the SyncAction field value
// and a boolean to check if the value has been set.
func (o *UpdatedContact) GetSyncActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncAction, true
}

// SetSyncAction sets field value
func (o *UpdatedContact) SetSyncAction(v string) {
	o.SyncAction = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *UpdatedContact) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *UpdatedContact) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *UpdatedContact) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetEmailAddress returns the EmailAddress field value
func (o *UpdatedContact) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *UpdatedContact) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *UpdatedContact) SetEmailAddress(v string) {
	o.EmailAddress = v
}

// GetId returns the Id field value
func (o *UpdatedContact) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdatedContact) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdatedContact) SetId(v string) {
	o.Id = v
}

// GetCustomerType returns the CustomerType field value if set, zero value otherwise.
func (o *UpdatedContact) GetCustomerType() string {
	if o == nil || o.CustomerType == nil {
		var ret string
		return ret
	}
	return *o.CustomerType
}

// GetCustomerTypeOk returns a tuple with the CustomerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatedContact) GetCustomerTypeOk() (*string, bool) {
	if o == nil || o.CustomerType == nil {
		return nil, false
	}
	return o.CustomerType, true
}

// HasCustomerType returns a boolean if a field has been set.
func (o *UpdatedContact) HasCustomerType() bool {
	if o != nil && o.CustomerType != nil {
		return true
	}

	return false
}

// SetCustomerType gets a reference to the given string and assigns it to the CustomerType field.
func (o *UpdatedContact) SetCustomerType(v string) {
	o.CustomerType = &v
}

func (o UpdatedContact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["syncAction"] = o.SyncAction
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.CustomerType != nil {
		toSerialize["customerType"] = o.CustomerType
	}
	return json.Marshal(toSerialize)
}

type NullableUpdatedContact struct {
	value *UpdatedContact
	isSet bool
}

func (v NullableUpdatedContact) Get() *UpdatedContact {
	return v.value
}

func (v *NullableUpdatedContact) Set(val *UpdatedContact) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatedContact) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatedContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatedContact(val *UpdatedContact) *NullableUpdatedContact {
	return &NullableUpdatedContact{value: val, isSet: true}
}

func (v NullableUpdatedContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatedContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
