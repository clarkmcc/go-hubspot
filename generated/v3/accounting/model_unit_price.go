/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
)

// UnitPrice Represents a unit price
type UnitPrice struct {
	// The actual unit price amount.
	Amount *float32 `json:"amount,omitempty"`
	// Indicates if the unit price amount already includes taxes.
	TaxIncluded bool `json:"taxIncluded"`
}

// NewUnitPrice instantiates a new UnitPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitPrice(taxIncluded bool) *UnitPrice {
	this := UnitPrice{}
	this.TaxIncluded = taxIncluded
	return &this
}

// NewUnitPriceWithDefaults instantiates a new UnitPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitPriceWithDefaults() *UnitPrice {
	this := UnitPrice{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *UnitPrice) GetAmount() float32 {
	if o == nil || o.Amount == nil {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitPrice) GetAmountOk() (*float32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *UnitPrice) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *UnitPrice) SetAmount(v float32) {
	o.Amount = &v
}

// GetTaxIncluded returns the TaxIncluded field value
func (o *UnitPrice) GetTaxIncluded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TaxIncluded
}

// GetTaxIncludedOk returns a tuple with the TaxIncluded field value
// and a boolean to check if the value has been set.
func (o *UnitPrice) GetTaxIncludedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxIncluded, true
}

// SetTaxIncluded sets field value
func (o *UnitPrice) SetTaxIncluded(v bool) {
	o.TaxIncluded = v
}

func (o UnitPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["taxIncluded"] = o.TaxIncluded
	}
	return json.Marshal(toSerialize)
}

type NullableUnitPrice struct {
	value *UnitPrice
	isSet bool
}

func (v NullableUnitPrice) Get() *UnitPrice {
	return v.value
}

func (v *NullableUnitPrice) Set(val *UnitPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitPrice(val *UnitPrice) *NullableUnitPrice {
	return &NullableUnitPrice{value: val, isSet: true}
}

func (v NullableUnitPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
