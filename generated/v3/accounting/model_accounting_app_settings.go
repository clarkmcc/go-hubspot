/*
Accounting Extension

These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounting

import (
	"encoding/json"
)

// AccountingAppSettings The URL Settings, which defines the URL endpoints that HubSpot will send requests to an external accounting application for certain actions.
type AccountingAppSettings struct {
	// The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.
	AppId    int32               `json:"appId"`
	Urls     AccountingAppUrls   `json:"urls"`
	Features *AccountingFeatures `json:"features,omitempty"`
}

// NewAccountingAppSettings instantiates a new AccountingAppSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountingAppSettings(appId int32, urls AccountingAppUrls) *AccountingAppSettings {
	this := AccountingAppSettings{}
	this.AppId = appId
	this.Urls = urls
	return &this
}

// NewAccountingAppSettingsWithDefaults instantiates a new AccountingAppSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountingAppSettingsWithDefaults() *AccountingAppSettings {
	this := AccountingAppSettings{}
	return &this
}

// GetAppId returns the AppId field value
func (o *AccountingAppSettings) GetAppId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *AccountingAppSettings) GetAppIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *AccountingAppSettings) SetAppId(v int32) {
	o.AppId = v
}

// GetUrls returns the Urls field value
func (o *AccountingAppSettings) GetUrls() AccountingAppUrls {
	if o == nil {
		var ret AccountingAppUrls
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *AccountingAppSettings) GetUrlsOk() (*AccountingAppUrls, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Urls, true
}

// SetUrls sets field value
func (o *AccountingAppSettings) SetUrls(v AccountingAppUrls) {
	o.Urls = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *AccountingAppSettings) GetFeatures() AccountingFeatures {
	if o == nil || o.Features == nil {
		var ret AccountingFeatures
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingAppSettings) GetFeaturesOk() (*AccountingFeatures, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *AccountingAppSettings) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given AccountingFeatures and assigns it to the Features field.
func (o *AccountingAppSettings) SetFeatures(v AccountingFeatures) {
	o.Features = &v
}

func (o AccountingAppSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["appId"] = o.AppId
	}
	if true {
		toSerialize["urls"] = o.Urls
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	return json.Marshal(toSerialize)
}

type NullableAccountingAppSettings struct {
	value *AccountingAppSettings
	isSet bool
}

func (v NullableAccountingAppSettings) Get() *AccountingAppSettings {
	return v.value
}

func (v *NullableAccountingAppSettings) Set(val *AccountingAppSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountingAppSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountingAppSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountingAppSettings(val *AccountingAppSettings) *NullableAccountingAppSettings {
	return &NullableAccountingAppSettings{value: val, isSet: true}
}

func (v NullableAccountingAppSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountingAppSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
