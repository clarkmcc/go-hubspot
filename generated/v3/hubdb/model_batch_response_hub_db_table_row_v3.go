/*
Hubdb

HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"time"
)

// BatchResponseHubDbTableRowV3 struct for BatchResponseHubDbTableRowV3
type BatchResponseHubDbTableRowV3 struct {
	CompletedAt *time.Time         `json:"completedAt,omitempty"`
	RequestedAt *time.Time         `json:"requestedAt,omitempty"`
	StartedAt   *time.Time         `json:"startedAt,omitempty"`
	Links       *map[string]string `json:"links,omitempty"`
	Results     []HubDbTableRowV3  `json:"results,omitempty"`
	Status      *string            `json:"status,omitempty"`
}

// NewBatchResponseHubDbTableRowV3 instantiates a new BatchResponseHubDbTableRowV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchResponseHubDbTableRowV3() *BatchResponseHubDbTableRowV3 {
	this := BatchResponseHubDbTableRowV3{}
	return &this
}

// NewBatchResponseHubDbTableRowV3WithDefaults instantiates a new BatchResponseHubDbTableRowV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchResponseHubDbTableRowV3WithDefaults() *BatchResponseHubDbTableRowV3 {
	this := BatchResponseHubDbTableRowV3{}
	return &this
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3) GetCompletedAt() time.Time {
	if o == nil || o.CompletedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || o.CompletedAt == nil {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3) HasCompletedAt() bool {
	if o != nil && o.CompletedAt != nil {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *BatchResponseHubDbTableRowV3) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetRequestedAt returns the RequestedAt field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3) GetRequestedAt() time.Time {
	if o == nil || o.RequestedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil || o.RequestedAt == nil {
		return nil, false
	}
	return o.RequestedAt, true
}

// HasRequestedAt returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3) HasRequestedAt() bool {
	if o != nil && o.RequestedAt != nil {
		return true
	}

	return false
}

// SetRequestedAt gets a reference to the given time.Time and assigns it to the RequestedAt field.
func (o *BatchResponseHubDbTableRowV3) SetRequestedAt(v time.Time) {
	o.RequestedAt = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3) GetStartedAt() time.Time {
	if o == nil || o.StartedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || o.StartedAt == nil {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3) HasStartedAt() bool {
	if o != nil && o.StartedAt != nil {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *BatchResponseHubDbTableRowV3) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3) GetLinks() map[string]string {
	if o == nil || o.Links == nil {
		var ret map[string]string
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3) GetLinksOk() (*map[string]string, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]string and assigns it to the Links field.
func (o *BatchResponseHubDbTableRowV3) SetLinks(v map[string]string) {
	o.Links = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3) GetResults() []HubDbTableRowV3 {
	if o == nil || o.Results == nil {
		var ret []HubDbTableRowV3
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3) GetResultsOk() ([]HubDbTableRowV3, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []HubDbTableRowV3 and assigns it to the Results field.
func (o *BatchResponseHubDbTableRowV3) SetResults(v []HubDbTableRowV3) {
	o.Results = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BatchResponseHubDbTableRowV3) SetStatus(v string) {
	o.Status = &v
}

func (o BatchResponseHubDbTableRowV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompletedAt != nil {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if o.RequestedAt != nil {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	if o.StartedAt != nil {
		toSerialize["startedAt"] = o.StartedAt
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBatchResponseHubDbTableRowV3 struct {
	value *BatchResponseHubDbTableRowV3
	isSet bool
}

func (v NullableBatchResponseHubDbTableRowV3) Get() *BatchResponseHubDbTableRowV3 {
	return v.value
}

func (v *NullableBatchResponseHubDbTableRowV3) Set(val *BatchResponseHubDbTableRowV3) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchResponseHubDbTableRowV3) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchResponseHubDbTableRowV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchResponseHubDbTableRowV3(val *BatchResponseHubDbTableRowV3) *NullableBatchResponseHubDbTableRowV3 {
	return &NullableBatchResponseHubDbTableRowV3{value: val, isSet: true}
}

func (v NullableBatchResponseHubDbTableRowV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchResponseHubDbTableRowV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
