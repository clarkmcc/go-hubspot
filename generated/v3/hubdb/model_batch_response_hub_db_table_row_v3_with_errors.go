/*
Hubdb

HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"encoding/json"
	"time"
)

// BatchResponseHubDbTableRowV3WithErrors struct for BatchResponseHubDbTableRowV3WithErrors
type BatchResponseHubDbTableRowV3WithErrors struct {
	//
	CompletedAt time.Time `json:"completedAt"`
	//
	NumErrors *int32 `json:"numErrors,omitempty"`
	//
	RequestedAt *time.Time `json:"requestedAt,omitempty"`
	//
	StartedAt time.Time `json:"startedAt"`
	//
	Links *map[string]string `json:"links,omitempty"`
	//
	Results []HubDbTableRowV3 `json:"results"`
	//
	Errors []StandardError `json:"errors,omitempty"`
	//
	Status string `json:"status"`
}

// NewBatchResponseHubDbTableRowV3WithErrors instantiates a new BatchResponseHubDbTableRowV3WithErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchResponseHubDbTableRowV3WithErrors(completedAt time.Time, startedAt time.Time, results []HubDbTableRowV3, status string) *BatchResponseHubDbTableRowV3WithErrors {
	this := BatchResponseHubDbTableRowV3WithErrors{}
	this.CompletedAt = completedAt
	this.StartedAt = startedAt
	this.Results = results
	this.Status = status
	return &this
}

// NewBatchResponseHubDbTableRowV3WithErrorsWithDefaults instantiates a new BatchResponseHubDbTableRowV3WithErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchResponseHubDbTableRowV3WithErrorsWithDefaults() *BatchResponseHubDbTableRowV3WithErrors {
	this := BatchResponseHubDbTableRowV3WithErrors{}
	return &this
}

// GetCompletedAt returns the CompletedAt field value
func (o *BatchResponseHubDbTableRowV3WithErrors) GetCompletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletedAt, true
}

// SetCompletedAt sets field value
func (o *BatchResponseHubDbTableRowV3WithErrors) SetCompletedAt(v time.Time) {
	o.CompletedAt = v
}

// GetNumErrors returns the NumErrors field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetNumErrors() int32 {
	if o == nil || o.NumErrors == nil {
		var ret int32
		return ret
	}
	return *o.NumErrors
}

// GetNumErrorsOk returns a tuple with the NumErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetNumErrorsOk() (*int32, bool) {
	if o == nil || o.NumErrors == nil {
		return nil, false
	}
	return o.NumErrors, true
}

// HasNumErrors returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) HasNumErrors() bool {
	if o != nil && o.NumErrors != nil {
		return true
	}

	return false
}

// SetNumErrors gets a reference to the given int32 and assigns it to the NumErrors field.
func (o *BatchResponseHubDbTableRowV3WithErrors) SetNumErrors(v int32) {
	o.NumErrors = &v
}

// GetRequestedAt returns the RequestedAt field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetRequestedAt() time.Time {
	if o == nil || o.RequestedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil || o.RequestedAt == nil {
		return nil, false
	}
	return o.RequestedAt, true
}

// HasRequestedAt returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) HasRequestedAt() bool {
	if o != nil && o.RequestedAt != nil {
		return true
	}

	return false
}

// SetRequestedAt gets a reference to the given time.Time and assigns it to the RequestedAt field.
func (o *BatchResponseHubDbTableRowV3WithErrors) SetRequestedAt(v time.Time) {
	o.RequestedAt = &v
}

// GetStartedAt returns the StartedAt field value
func (o *BatchResponseHubDbTableRowV3WithErrors) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *BatchResponseHubDbTableRowV3WithErrors) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetLinks() map[string]string {
	if o == nil || o.Links == nil {
		var ret map[string]string
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetLinksOk() (*map[string]string, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]string and assigns it to the Links field.
func (o *BatchResponseHubDbTableRowV3WithErrors) SetLinks(v map[string]string) {
	o.Links = &v
}

// GetResults returns the Results field value
func (o *BatchResponseHubDbTableRowV3WithErrors) GetResults() []HubDbTableRowV3 {
	if o == nil {
		var ret []HubDbTableRowV3
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetResultsOk() ([]HubDbTableRowV3, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *BatchResponseHubDbTableRowV3WithErrors) SetResults(v []HubDbTableRowV3) {
	o.Results = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetErrors() []StandardError {
	if o == nil || o.Errors == nil {
		var ret []StandardError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetErrorsOk() ([]StandardError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []StandardError and assigns it to the Errors field.
func (o *BatchResponseHubDbTableRowV3WithErrors) SetErrors(v []StandardError) {
	o.Errors = v
}

// GetStatus returns the Status field value
func (o *BatchResponseHubDbTableRowV3WithErrors) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BatchResponseHubDbTableRowV3WithErrors) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BatchResponseHubDbTableRowV3WithErrors) SetStatus(v string) {
	o.Status = v
}

func (o BatchResponseHubDbTableRowV3WithErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if o.NumErrors != nil {
		toSerialize["numErrors"] = o.NumErrors
	}
	if o.RequestedAt != nil {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	if true {
		toSerialize["startedAt"] = o.StartedAt
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if true {
		toSerialize["results"] = o.Results
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBatchResponseHubDbTableRowV3WithErrors struct {
	value *BatchResponseHubDbTableRowV3WithErrors
	isSet bool
}

func (v NullableBatchResponseHubDbTableRowV3WithErrors) Get() *BatchResponseHubDbTableRowV3WithErrors {
	return v.value
}

func (v *NullableBatchResponseHubDbTableRowV3WithErrors) Set(val *BatchResponseHubDbTableRowV3WithErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchResponseHubDbTableRowV3WithErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchResponseHubDbTableRowV3WithErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchResponseHubDbTableRowV3WithErrors(val *BatchResponseHubDbTableRowV3WithErrors) *NullableBatchResponseHubDbTableRowV3WithErrors {
	return &NullableBatchResponseHubDbTableRowV3WithErrors{value: val, isSet: true}
}

func (v NullableBatchResponseHubDbTableRowV3WithErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchResponseHubDbTableRowV3WithErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
