{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Blog Post endpoints",
    "description" : "Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags",
    "version" : "v3"
  },
  "servers" : [ {
    "url" : "https://api.hubapi.com/"
  } ],
  "tags" : [ {
    "name" : "Blog Posts"
  } ],
  "paths" : {
    "/cms/v3/blogs/posts" : {
      "get" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Get all Blog Posts",
        "description" : "Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.\n",
        "operationId" : "GetPage",
        "parameters" : [ {
          "name" : "createdAt",
          "in" : "query",
          "description" : "Only return Blog Posts created at exactly the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdAfter",
          "in" : "query",
          "description" : "Only return Blog Posts created after the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdBefore",
          "in" : "query",
          "description" : "Only return Blog Posts created before the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "Only return Blog Posts last updated at exactly the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAfter",
          "in" : "query",
          "description" : "Only return Blog Posts last updated after the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedBefore",
          "in" : "query",
          "description" : "Only return Blog Posts last updated before the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Specifies which fields to use for sorting results. Valid fields are `name`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`. `createdAt` will be used by default.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of results to return. Default is 20.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to return deleted Blog Posts. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseWithTotalBlogPostForwardPaging"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      },
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Create a new Blog Post",
        "description" : "Create a new Blog Post.",
        "operationId" : "Create",
        "requestBody" : {
          "description" : "The JSON representation of a new Blog Post.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlogPost"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/batch/archive" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Delete a batch of Blog Posts",
        "description" : "Delete the Blog Post objects identified in the request body.\nNote: This is not the same as the in-app `archive` function. To perform a dashboard `archive` send an normal update with the `archivedInDashboard` field set to true.",
        "operationId" : "BatchArchive",
        "requestBody" : {
          "description" : "The JSON array of Blog Post ids.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputString"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/batch/create" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Create a batch of Blog Posts",
        "description" : "Create the Blog Post objects detailed in the request body.",
        "operationId" : "BatchCreate",
        "requestBody" : {
          "description" : "The JSON array of new Blog Posts to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputBlogPost"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogPost"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogPostWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/batch/read" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Retrieve a batch of Blog Posts",
        "description" : "Retrieve the Blog Post objects identified in the request body.",
        "operationId" : "BatchRead",
        "parameters" : [ {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to return deleted Blog Posts. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON array of Blog Post ids.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputString"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogPost"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogPostWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/batch/update" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Update a batch of Blog Posts",
        "description" : "Update the Blog Post objects identified in the request body.",
        "operationId" : "BatchUpdate",
        "parameters" : [ {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to update deleted Blog Posts. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON array of the JSON representations of the updated Blog Posts.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputJsonNode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogPost"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogPostWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/clone" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Clone a Blog Post",
        "description" : "Clone a Blog Post.",
        "operationId" : "Clone",
        "requestBody" : {
          "description" : "The JSON representation of the ContentCloneRequest object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContentCloneRequestVNext"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/multi-language/attach-to-lang-group" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Attach a Blog Post to a multi-language group",
        "description" : "Attach a Blog Post to a multi-language group.",
        "operationId" : "AttachToLanguageGroup",
        "requestBody" : {
          "description" : "The JSON representation of the AttachToLangPrimaryRequest object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AttachToLangPrimaryRequestVNext"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/multi-language/create-language-variation" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Create a new language variation",
        "description" : "Create a new language variation from an existing Blog Post",
        "operationId" : "CreateLanguageVariation",
        "requestBody" : {
          "description" : "The JSON representation of the BlogPostLanguageCloneRequestVNext object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlogPostLanguageCloneRequestVNext"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/multi-language/detach-from-lang-group" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Detach a Blog Post from a multi-language group",
        "description" : "Detach a Blog Post from a multi-language group.",
        "operationId" : "DetachFromLanguageGroup",
        "requestBody" : {
          "description" : "The JSON representation of the DetachFromLangGroupRequest object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DetachFromLangGroupRequestVNext"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/multi-language/set-new-lang-primary" : {
      "put" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Set a new primary language",
        "description" : "Set a Blog Post as the primary language of a multi-language group.",
        "operationId" : "SetLanguagePrimary",
        "requestBody" : {
          "description" : "The JSON representation of the SetNewLanguagePrimaryRequest object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SetNewLanguagePrimaryRequestVNext"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/multi-language/update-languages" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Update languages of multi-language group",
        "description" : "Explicitly set new languages for each Blog Post in a multi-language group.",
        "operationId" : "UpdateLanguages",
        "requestBody" : {
          "description" : "The JSON representation of the SetNewLanguagePrimaryRequest object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateLanguagesRequestVNext"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/schedule" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Schedule a Blog Post to be Published",
        "description" : "Schedule a Blog Post to be Published.",
        "operationId" : "Schedule",
        "requestBody" : {
          "description" : "The JSON representation of the ContentScheduleRequestVNext object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContentScheduleRequestVNext"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}" : {
      "get" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Retrieve a Blog Post",
        "description" : "Retrieve the Blog Post object identified by the id in the path.",
        "operationId" : "GetByID",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to return deleted Blog Posts. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Delete a Blog Post",
        "description" : "Delete the Blog Post object identified by the id in the path.",
        "operationId" : "Archive",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Whether to return only results that have been archived.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      },
      "patch" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Update a Blog Post",
        "description" : "Sparse updates a single Blog Post object identified by the id in the path.\nAll the column values need not be specified. Only the that need to be modified can be specified.\n",
        "operationId" : "Update",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to update deleted Blog Posts. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON representation of the updated Blog Post.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlogPost"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}/draft" : {
      "get" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Retrieve the full draft version of the Blog Post",
        "description" : "Retrieve the full draft version of the Blog Post.",
        "operationId" : "GetDraftByID",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      },
      "patch" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Update a Blog Post draft",
        "description" : "Sparse updates the draft version of a single Blog Post object identified by the id in the path.\nAll the column values need not be specified. Only the that need to be modified can be specified.\n",
        "operationId" : "UpdateDraft",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON representation of the updated Blog Post to be applied to the draft.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlogPost"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}/draft/push-live" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Push Blog Post draft edits live",
        "description" : "Take any changes from the draft version of the Blog Post and apply them to the live version.",
        "operationId" : "PushLive",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The id of the Blog Post for which it's draft will be pushed live.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}/draft/reset" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Reset the Blog Post draft to the live version",
        "description" : "Discards any edits and resets the draft to the live version.",
        "operationId" : "ResetDraft",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The id of the Blog Post for which it's draft will be reset.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}/revisions" : {
      "get" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Retrieves all the previous versions of a blog post",
        "description" : "Retrieves all the previous versions of a blog post.",
        "operationId" : "GetPreviousVersions",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of results to return. Default is 100.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseWithTotalVersionBlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}" : {
      "get" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Retrieves a previous version of a blog post",
        "description" : "Retrieves a previous version of a blog post.",
        "operationId" : "GetPreviousVersion",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revisionId",
          "in" : "path",
          "description" : "The Blog Post version id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionBlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Restore a previous version of a blog post",
        "description" : "Takes a specified version of a blog post and restores it.",
        "operationId" : "RestorePreviousVersion",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revisionId",
          "in" : "path",
          "description" : "The Blog Post version id to restore.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    },
    "/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore-to-draft" : {
      "post" : {
        "tags" : [ "Blog Posts" ],
        "summary" : "Restore a previous version of a blog post, to the draft version of the blog post",
        "description" : "Takes a specified version of a blog post, sets it as the new draft version of the blog post.",
        "operationId" : "RestorePreviousVersionToDraft",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Post id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revisionId",
          "in" : "path",
          "description" : "The Blog Post version id to restore.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "hapikey" : [ ]
        }, {
          "oauth2_legacy" : [ "content" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "BatchInputString" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "description" : "Strings to input.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Wrapper for providing an array of strings as inputs."
      },
      "StandardError" : {
        "required" : [ "category", "context", "errors", "links", "message", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Error status."
          },
          "id" : {
            "type" : "string",
            "description" : "Error ID."
          },
          "category" : {
            "$ref" : "#/components/schemas/ErrorCategory"
          },
          "subCategory" : {
            "type" : "object",
            "properties" : { },
            "description" : "Error subcategory."
          },
          "message" : {
            "type" : "string",
            "description" : "Error message."
          },
          "errors" : {
            "type" : "array",
            "description" : "List of error details.",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Error context."
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Error links."
          }
        },
        "description" : "Model definition for a standard error."
      },
      "BatchInputJsonNode" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "description" : "JSON nodes to input.",
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          }
        },
        "description" : "Wrapper for providing an array of JSON nodes as inputs."
      },
      "UpdateLanguagesRequestVNext" : {
        "required" : [ "languages", "primaryId" ],
        "type" : "object",
        "properties" : {
          "primaryId" : {
            "type" : "string",
            "description" : "ID of the primary object in the multi-language group."
          },
          "languages" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "enum" : [ "af", "af-na", "af-za", "agq", "agq-cm", "ak", "ak-gh", "am", "am-et", "ar", "ar-001", "ar-ae", "ar-bh", "ar-dj", "ar-dz", "ar-eg", "ar-eh", "ar-er", "ar-il", "ar-iq", "ar-jo", "ar-km", "ar-kw", "ar-lb", "ar-ly", "ar-ma", "ar-mr", "ar-om", "ar-ps", "ar-qa", "ar-sa", "ar-sd", "ar-so", "ar-ss", "ar-sy", "ar-td", "ar-tn", "ar-ye", "as", "as-in", "asa", "asa-tz", "ast", "ast-es", "az", "az-az", "bas", "bas-cm", "be", "be-by", "bem", "bem-zm", "bez", "bez-tz", "bg", "bg-bg", "bm", "bm-ml", "bn", "bn-bd", "bn-in", "bo", "bo-cn", "bo-in", "br", "br-fr", "brx", "brx-in", "bs", "bs-ba", "ca", "ca-ad", "ca-es", "ca-fr", "ca-it", "ccp", "ccp-bd", "ccp-in", "ce", "ce-ru", "cgg", "cgg-ug", "chr", "chr-us", "ckb", "ckb-iq", "ckb-ir", "cs", "cs-cz", "cu", "cu-ru", "cy", "cy-gb", "da", "da-dk", "da-gl", "dav", "dav-ke", "de", "de-at", "de-be", "de-ch", "de-de", "de-gr", "de-it", "de-li", "de-lu", "dje", "dje-ne", "dsb", "dsb-de", "dua", "dua-cm", "dyo", "dyo-sn", "dz", "dz-bt", "ebu", "ebu-ke", "ee", "ee-gh", "ee-tg", "el", "el-cy", "el-gr", "en", "en-001", "en-150", "en-ae", "en-ag", "en-ai", "en-as", "en-at", "en-au", "en-bb", "en-be", "en-bi", "en-bm", "en-bs", "en-bw", "en-bz", "en-ca", "en-cc", "en-ch", "en-ck", "en-cm", "en-cx", "en-cy", "en-de", "en-dg", "en-dk", "en-dm", "en-er", "en-fi", "en-fj", "en-fk", "en-fm", "en-gb", "en-gd", "en-gg", "en-gh", "en-gi", "en-gm", "en-gu", "en-gy", "en-hk", "en-ie", "en-il", "en-im", "en-in", "en-io", "en-je", "en-jm", "en-ke", "en-ki", "en-kn", "en-ky", "en-lc", "en-lr", "en-ls", "en-lu", "en-mg", "en-mh", "en-mo", "en-mp", "en-ms", "en-mt", "en-mu", "en-mw", "en-my", "en-na", "en-nf", "en-ng", "en-nl", "en-nr", "en-nu", "en-nz", "en-pg", "en-ph", "en-pk", "en-pn", "en-pr", "en-pw", "en-rw", "en-sb", "en-sc", "en-sd", "en-se", "en-sg", "en-sh", "en-si", "en-sl", "en-ss", "en-sx", "en-sz", "en-tc", "en-tk", "en-to", "en-tt", "en-tv", "en-tz", "en-ug", "en-um", "en-us", "en-vc", "en-vg", "en-vi", "en-vu", "en-ws", "en-za", "en-zm", "en-zw", "eo", "eo-001", "es", "es-419", "es-ar", "es-bo", "es-br", "es-bz", "es-cl", "es-co", "es-cr", "es-cu", "es-do", "es-ea", "es-ec", "es-es", "es-gq", "es-gt", "es-hn", "es-ic", "es-mx", "es-ni", "es-pa", "es-pe", "es-ph", "es-pr", "es-py", "es-sv", "es-us", "es-uy", "es-ve", "et", "et-ee", "eu", "eu-es", "ewo", "ewo-cm", "fa", "fa-af", "fa-ir", "ff", "ff-cm", "ff-gn", "ff-mr", "ff-sn", "fi", "fi-fi", "fil", "fil-ph", "fo", "fo-dk", "fo-fo", "fr", "fr-be", "fr-bf", "fr-bi", "fr-bj", "fr-bl", "fr-ca", "fr-cd", "fr-cf", "fr-cg", "fr-ch", "fr-ci", "fr-cm", "fr-dj", "fr-dz", "fr-fr", "fr-ga", "fr-gf", "fr-gn", "fr-gp", "fr-gq", "fr-ht", "fr-km", "fr-lu", "fr-ma", "fr-mc", "fr-mf", "fr-mg", "fr-ml", "fr-mq", "fr-mr", "fr-mu", "fr-nc", "fr-ne", "fr-pf", "fr-pm", "fr-re", "fr-rw", "fr-sc", "fr-sn", "fr-sy", "fr-td", "fr-tg", "fr-tn", "fr-vu", "fr-wf", "fr-yt", "fur", "fur-it", "fy", "fy-nl", "ga", "ga-ie", "gd", "gd-gb", "gl", "gl-es", "gsw", "gsw-ch", "gsw-fr", "gsw-li", "gu", "gu-in", "guz", "guz-ke", "gv", "gv-im", "ha", "ha-gh", "ha-ne", "ha-ng", "haw", "haw-us", "he", "hi", "hi-in", "hr", "hr-ba", "hr-hr", "hsb", "hsb-de", "hu", "hu-hu", "hy", "hy-am", "id", "ig", "ig-ng", "ii", "ii-cn", "id-id", "is", "is-is", "it", "it-ch", "it-it", "it-sm", "it-va", "he-il", "ja", "ja-jp", "jgo", "jgo-cm", "yi", "yi-001", "jmc", "jmc-tz", "ka", "ka-ge", "kab", "kab-dz", "kam", "kam-ke", "kde", "kde-tz", "kea", "kea-cv", "khq", "khq-ml", "ki", "ki-ke", "kk", "kk-kz", "kkj", "kkj-cm", "kl", "kl-gl", "kln", "kln-ke", "km", "km-kh", "kn", "kn-in", "ko", "ko-kp", "ko-kr", "kok", "kok-in", "ks", "ks-in", "ksb", "ksb-tz", "ksf", "ksf-cm", "ksh", "ksh-de", "kw", "kw-gb", "ky", "ky-kg", "lag", "lag-tz", "lb", "lb-lu", "lg", "lg-ug", "lkt", "lkt-us", "ln", "ln-ao", "ln-cd", "ln-cf", "ln-cg", "lo", "lo-la", "lrc", "lrc-iq", "lrc-ir", "lt", "lt-lt", "lu", "lu-cd", "luo", "luo-ke", "luy", "luy-ke", "lv", "lv-lv", "mas", "mas-ke", "mas-tz", "mer", "mer-ke", "mfe", "mfe-mu", "mg", "mg-mg", "mgh", "mgh-mz", "mgo", "mgo-cm", "mk", "mk-mk", "ml", "ml-in", "mn", "mn-mn", "mr", "mr-in", "ms", "ms-bn", "ms-my", "ms-sg", "mt", "mt-mt", "mua", "mua-cm", "my", "my-mm", "mzn", "mzn-ir", "naq", "naq-na", "nb", "nb-no", "nb-sj", "nd", "nd-zw", "nds", "nds-de", "nds-nl", "ne", "ne-in", "ne-np", "nl", "nl-aw", "nl-be", "nl-ch", "nl-bq", "nl-cw", "nl-lu", "nl-nl", "nl-sr", "nl-sx", "nmg", "nmg-cm", "nn", "nn-no", "nnh", "nnh-cm", "no", "no-no", "nus", "nus-ss", "nyn", "nyn-ug", "om", "om-et", "om-ke", "or", "or-in", "os", "os-ge", "os-ru", "pa", "pa-in", "pa-pk", "pl", "pl-pl", "prg", "prg-001", "ps", "ps-af", "pt", "pt-ao", "pt-br", "pt-ch", "pt-cv", "pt-gq", "pt-gw", "pt-lu", "pt-mo", "pt-mz", "pt-pt", "pt-st", "pt-tl", "qu", "qu-bo", "qu-ec", "qu-pe", "rm", "rm-ch", "rn", "rn-bi", "ro", "ro-md", "ro-ro", "rof", "rof-tz", "ru", "ru-by", "ru-kg", "ru-kz", "ru-md", "ru-ru", "ru-ua", "rw", "rw-rw", "rwk", "rwk-tz", "sa", "sah", "sah-ru", "saq", "saq-ke", "sbp", "sbp-tz", "sd", "sd-pk", "se", "se-fi", "se-no", "se-se", "seh", "seh-mz", "ses", "ses-ml", "sg", "sg-cf", "shi", "shi-ma", "si", "si-lk", "sk", "sk-sk", "sl", "sl-si", "smn", "smn-fi", "sn", "sn-zw", "so", "so-dj", "so-et", "so-ke", "so-so", "sq", "sq-al", "sq-mk", "sq-xk", "sr", "sr-ba", "sr-cs", "sr-me", "sr-rs", "sr-xk", "sv", "sv-ax", "sv-fi", "sv-se", "sw", "sw-cd", "sw-ke", "sw-tz", "sw-ug", "sy", "ta", "ta-in", "ta-lk", "ta-my", "ta-sg", "te", "te-in", "teo", "teo-ke", "teo-ug", "tg", "tg-tj", "th", "th-th", "ti", "ti-er", "ti-et", "tk", "tk-tm", "to", "to-to", "tr", "tr-cy", "tr-tr", "tt", "tt-ru", "twq", "twq-ne", "tzm", "tzm-ma", "ug", "ug-cn", "uk", "uk-ua", "ur", "ur-in", "ur-pk", "uz", "uz-af", "uz-uz", "vai", "vai-lr", "vi", "vi-vn", "vo", "vo-001", "vun", "vun-tz", "wae", "wae-ch", "wo", "wo-sn", "xog", "xog-ug", "yav", "yav-cm", "yo", "yo-bj", "yo-ng", "yue", "yue-cn", "yue-hk", "zgh", "zgh-ma", "zh", "zh-cn", "zh-hk", "zh-mo", "zh-sg", "zh-tw", "zh-hans", "zh-hant", "zu", "zu-za" ],
              "x-hubspot-external-project-origin" : true
            },
            "description" : "Map of object IDs to associated languages of object in the multi-language group."
          }
        },
        "description" : "Request object for updating languages within a multi-language group."
      },
      "CollectionResponseWithTotalVersionBlogPost" : {
        "required" : [ "results", "total" ],
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "description" : "Total number of blog post versions.",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "Collection of blog post versions.",
            "items" : {
              "$ref" : "#/components/schemas/VersionBlogPost"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        },
        "description" : "Response object for collections of blog post versions with pagination information."
      },
      "SetNewLanguagePrimaryRequestVNext" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of object to set as primary in multi-language group."
          }
        },
        "description" : "Request body object for setting a new primary language."
      },
      "RGBAColor" : {
        "required" : [ "a", "b", "g", "r" ],
        "type" : "object",
        "properties" : {
          "r" : {
            "type" : "integer",
            "description" : "Red.",
            "format" : "int32"
          },
          "g" : {
            "type" : "integer",
            "description" : "Green.",
            "format" : "int32"
          },
          "b" : {
            "type" : "integer",
            "description" : "Blue.",
            "format" : "int32"
          },
          "a" : {
            "type" : "number",
            "description" : "Alpha."
          }
        },
        "description" : "A color defined by RGB values."
      },
      "DetachFromLangGroupRequestVNext" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the object to remove from a multi-language group."
          }
        },
        "description" : "Request body object for detaching objects from multi-language groups."
      },
      "RowMetaData" : {
        "required" : [ "cssClass", "styles" ],
        "type" : "object",
        "properties" : {
          "styles" : {
            "$ref" : "#/components/schemas/Styles"
          },
          "cssClass" : {
            "type" : "string"
          }
        }
      },
      "ContentLanguageVariation" : {
        "required" : [ "archivedInDashboard", "authorName", "campaign", "created", "id", "name", "password", "publicAccessRules", "publicAccessRulesEnabled", "publishDate", "slug", "state", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "authorName" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "publicAccessRulesEnabled" : {
            "type" : "boolean"
          },
          "publicAccessRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PublicAccessRule"
            }
          },
          "campaign" : {
            "type" : "string"
          },
          "tagIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "archivedInDashboard" : {
            "type" : "boolean"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "publishDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "AttachToLangPrimaryRequestVNext" : {
        "required" : [ "id", "language", "primaryId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the object to add to a multi-language group."
          },
          "language" : {
            "type" : "string",
            "description" : "Designated language of the object to add to a multi-language group.",
            "enum" : [ "af", "af-na", "af-za", "agq", "agq-cm", "ak", "ak-gh", "am", "am-et", "ar", "ar-001", "ar-ae", "ar-bh", "ar-dj", "ar-dz", "ar-eg", "ar-eh", "ar-er", "ar-il", "ar-iq", "ar-jo", "ar-km", "ar-kw", "ar-lb", "ar-ly", "ar-ma", "ar-mr", "ar-om", "ar-ps", "ar-qa", "ar-sa", "ar-sd", "ar-so", "ar-ss", "ar-sy", "ar-td", "ar-tn", "ar-ye", "as", "as-in", "asa", "asa-tz", "ast", "ast-es", "az", "az-az", "bas", "bas-cm", "be", "be-by", "bem", "bem-zm", "bez", "bez-tz", "bg", "bg-bg", "bm", "bm-ml", "bn", "bn-bd", "bn-in", "bo", "bo-cn", "bo-in", "br", "br-fr", "brx", "brx-in", "bs", "bs-ba", "ca", "ca-ad", "ca-es", "ca-fr", "ca-it", "ccp", "ccp-bd", "ccp-in", "ce", "ce-ru", "cgg", "cgg-ug", "chr", "chr-us", "ckb", "ckb-iq", "ckb-ir", "cs", "cs-cz", "cu", "cu-ru", "cy", "cy-gb", "da", "da-dk", "da-gl", "dav", "dav-ke", "de", "de-at", "de-be", "de-ch", "de-de", "de-gr", "de-it", "de-li", "de-lu", "dje", "dje-ne", "dsb", "dsb-de", "dua", "dua-cm", "dyo", "dyo-sn", "dz", "dz-bt", "ebu", "ebu-ke", "ee", "ee-gh", "ee-tg", "el", "el-cy", "el-gr", "en", "en-001", "en-150", "en-ae", "en-ag", "en-ai", "en-as", "en-at", "en-au", "en-bb", "en-be", "en-bi", "en-bm", "en-bs", "en-bw", "en-bz", "en-ca", "en-cc", "en-ch", "en-ck", "en-cm", "en-cx", "en-cy", "en-de", "en-dg", "en-dk", "en-dm", "en-er", "en-fi", "en-fj", "en-fk", "en-fm", "en-gb", "en-gd", "en-gg", "en-gh", "en-gi", "en-gm", "en-gu", "en-gy", "en-hk", "en-ie", "en-il", "en-im", "en-in", "en-io", "en-je", "en-jm", "en-ke", "en-ki", "en-kn", "en-ky", "en-lc", "en-lr", "en-ls", "en-lu", "en-mg", "en-mh", "en-mo", "en-mp", "en-ms", "en-mt", "en-mu", "en-mw", "en-my", "en-na", "en-nf", "en-ng", "en-nl", "en-nr", "en-nu", "en-nz", "en-pg", "en-ph", "en-pk", "en-pn", "en-pr", "en-pw", "en-rw", "en-sb", "en-sc", "en-sd", "en-se", "en-sg", "en-sh", "en-si", "en-sl", "en-ss", "en-sx", "en-sz", "en-tc", "en-tk", "en-to", "en-tt", "en-tv", "en-tz", "en-ug", "en-um", "en-us", "en-vc", "en-vg", "en-vi", "en-vu", "en-ws", "en-za", "en-zm", "en-zw", "eo", "eo-001", "es", "es-419", "es-ar", "es-bo", "es-br", "es-bz", "es-cl", "es-co", "es-cr", "es-cu", "es-do", "es-ea", "es-ec", "es-es", "es-gq", "es-gt", "es-hn", "es-ic", "es-mx", "es-ni", "es-pa", "es-pe", "es-ph", "es-pr", "es-py", "es-sv", "es-us", "es-uy", "es-ve", "et", "et-ee", "eu", "eu-es", "ewo", "ewo-cm", "fa", "fa-af", "fa-ir", "ff", "ff-cm", "ff-gn", "ff-mr", "ff-sn", "fi", "fi-fi", "fil", "fil-ph", "fo", "fo-dk", "fo-fo", "fr", "fr-be", "fr-bf", "fr-bi", "fr-bj", "fr-bl", "fr-ca", "fr-cd", "fr-cf", "fr-cg", "fr-ch", "fr-ci", "fr-cm", "fr-dj", "fr-dz", "fr-fr", "fr-ga", "fr-gf", "fr-gn", "fr-gp", "fr-gq", "fr-ht", "fr-km", "fr-lu", "fr-ma", "fr-mc", "fr-mf", "fr-mg", "fr-ml", "fr-mq", "fr-mr", "fr-mu", "fr-nc", "fr-ne", "fr-pf", "fr-pm", "fr-re", "fr-rw", "fr-sc", "fr-sn", "fr-sy", "fr-td", "fr-tg", "fr-tn", "fr-vu", "fr-wf", "fr-yt", "fur", "fur-it", "fy", "fy-nl", "ga", "ga-ie", "gd", "gd-gb", "gl", "gl-es", "gsw", "gsw-ch", "gsw-fr", "gsw-li", "gu", "gu-in", "guz", "guz-ke", "gv", "gv-im", "ha", "ha-gh", "ha-ne", "ha-ng", "haw", "haw-us", "he", "hi", "hi-in", "hr", "hr-ba", "hr-hr", "hsb", "hsb-de", "hu", "hu-hu", "hy", "hy-am", "id", "ig", "ig-ng", "ii", "ii-cn", "id-id", "is", "is-is", "it", "it-ch", "it-it", "it-sm", "it-va", "he-il", "ja", "ja-jp", "jgo", "jgo-cm", "yi", "yi-001", "jmc", "jmc-tz", "ka", "ka-ge", "kab", "kab-dz", "kam", "kam-ke", "kde", "kde-tz", "kea", "kea-cv", "khq", "khq-ml", "ki", "ki-ke", "kk", "kk-kz", "kkj", "kkj-cm", "kl", "kl-gl", "kln", "kln-ke", "km", "km-kh", "kn", "kn-in", "ko", "ko-kp", "ko-kr", "kok", "kok-in", "ks", "ks-in", "ksb", "ksb-tz", "ksf", "ksf-cm", "ksh", "ksh-de", "kw", "kw-gb", "ky", "ky-kg", "lag", "lag-tz", "lb", "lb-lu", "lg", "lg-ug", "lkt", "lkt-us", "ln", "ln-ao", "ln-cd", "ln-cf", "ln-cg", "lo", "lo-la", "lrc", "lrc-iq", "lrc-ir", "lt", "lt-lt", "lu", "lu-cd", "luo", "luo-ke", "luy", "luy-ke", "lv", "lv-lv", "mas", "mas-ke", "mas-tz", "mer", "mer-ke", "mfe", "mfe-mu", "mg", "mg-mg", "mgh", "mgh-mz", "mgo", "mgo-cm", "mk", "mk-mk", "ml", "ml-in", "mn", "mn-mn", "mr", "mr-in", "ms", "ms-bn", "ms-my", "ms-sg", "mt", "mt-mt", "mua", "mua-cm", "my", "my-mm", "mzn", "mzn-ir", "naq", "naq-na", "nb", "nb-no", "nb-sj", "nd", "nd-zw", "nds", "nds-de", "nds-nl", "ne", "ne-in", "ne-np", "nl", "nl-aw", "nl-be", "nl-ch", "nl-bq", "nl-cw", "nl-lu", "nl-nl", "nl-sr", "nl-sx", "nmg", "nmg-cm", "nn", "nn-no", "nnh", "nnh-cm", "no", "no-no", "nus", "nus-ss", "nyn", "nyn-ug", "om", "om-et", "om-ke", "or", "or-in", "os", "os-ge", "os-ru", "pa", "pa-in", "pa-pk", "pl", "pl-pl", "prg", "prg-001", "ps", "ps-af", "pt", "pt-ao", "pt-br", "pt-ch", "pt-cv", "pt-gq", "pt-gw", "pt-lu", "pt-mo", "pt-mz", "pt-pt", "pt-st", "pt-tl", "qu", "qu-bo", "qu-ec", "qu-pe", "rm", "rm-ch", "rn", "rn-bi", "ro", "ro-md", "ro-ro", "rof", "rof-tz", "ru", "ru-by", "ru-kg", "ru-kz", "ru-md", "ru-ru", "ru-ua", "rw", "rw-rw", "rwk", "rwk-tz", "sa", "sah", "sah-ru", "saq", "saq-ke", "sbp", "sbp-tz", "sd", "sd-pk", "se", "se-fi", "se-no", "se-se", "seh", "seh-mz", "ses", "ses-ml", "sg", "sg-cf", "shi", "shi-ma", "si", "si-lk", "sk", "sk-sk", "sl", "sl-si", "smn", "smn-fi", "sn", "sn-zw", "so", "so-dj", "so-et", "so-ke", "so-so", "sq", "sq-al", "sq-mk", "sq-xk", "sr", "sr-ba", "sr-cs", "sr-me", "sr-rs", "sr-xk", "sv", "sv-ax", "sv-fi", "sv-se", "sw", "sw-cd", "sw-ke", "sw-tz", "sw-ug", "sy", "ta", "ta-in", "ta-lk", "ta-my", "ta-sg", "te", "te-in", "teo", "teo-ke", "teo-ug", "tg", "tg-tj", "th", "th-th", "ti", "ti-er", "ti-et", "tk", "tk-tm", "to", "to-to", "tr", "tr-cy", "tr-tr", "tt", "tt-ru", "twq", "twq-ne", "tzm", "tzm-ma", "ug", "ug-cn", "uk", "uk-ua", "ur", "ur-in", "ur-pk", "uz", "uz-af", "uz-uz", "vai", "vai-lr", "vi", "vi-vn", "vo", "vo-001", "vun", "vun-tz", "wae", "wae-ch", "wo", "wo-sn", "xog", "xog-ug", "yav", "yav-cm", "yo", "yo-bj", "yo-ng", "yue", "yue-cn", "yue-hk", "zgh", "zgh-ma", "zh", "zh-cn", "zh-hk", "zh-mo", "zh-sg", "zh-tw", "zh-hans", "zh-hant", "zu", "zu-za" ]
          },
          "primaryId" : {
            "type" : "string",
            "description" : "ID of primary language object in multi-language group."
          },
          "primaryLanguage" : {
            "type" : "string",
            "description" : "Primary language of the multi-language group.",
            "enum" : [ "af", "af-na", "af-za", "agq", "agq-cm", "ak", "ak-gh", "am", "am-et", "ar", "ar-001", "ar-ae", "ar-bh", "ar-dj", "ar-dz", "ar-eg", "ar-eh", "ar-er", "ar-il", "ar-iq", "ar-jo", "ar-km", "ar-kw", "ar-lb", "ar-ly", "ar-ma", "ar-mr", "ar-om", "ar-ps", "ar-qa", "ar-sa", "ar-sd", "ar-so", "ar-ss", "ar-sy", "ar-td", "ar-tn", "ar-ye", "as", "as-in", "asa", "asa-tz", "ast", "ast-es", "az", "az-az", "bas", "bas-cm", "be", "be-by", "bem", "bem-zm", "bez", "bez-tz", "bg", "bg-bg", "bm", "bm-ml", "bn", "bn-bd", "bn-in", "bo", "bo-cn", "bo-in", "br", "br-fr", "brx", "brx-in", "bs", "bs-ba", "ca", "ca-ad", "ca-es", "ca-fr", "ca-it", "ccp", "ccp-bd", "ccp-in", "ce", "ce-ru", "cgg", "cgg-ug", "chr", "chr-us", "ckb", "ckb-iq", "ckb-ir", "cs", "cs-cz", "cu", "cu-ru", "cy", "cy-gb", "da", "da-dk", "da-gl", "dav", "dav-ke", "de", "de-at", "de-be", "de-ch", "de-de", "de-gr", "de-it", "de-li", "de-lu", "dje", "dje-ne", "dsb", "dsb-de", "dua", "dua-cm", "dyo", "dyo-sn", "dz", "dz-bt", "ebu", "ebu-ke", "ee", "ee-gh", "ee-tg", "el", "el-cy", "el-gr", "en", "en-001", "en-150", "en-ae", "en-ag", "en-ai", "en-as", "en-at", "en-au", "en-bb", "en-be", "en-bi", "en-bm", "en-bs", "en-bw", "en-bz", "en-ca", "en-cc", "en-ch", "en-ck", "en-cm", "en-cx", "en-cy", "en-de", "en-dg", "en-dk", "en-dm", "en-er", "en-fi", "en-fj", "en-fk", "en-fm", "en-gb", "en-gd", "en-gg", "en-gh", "en-gi", "en-gm", "en-gu", "en-gy", "en-hk", "en-ie", "en-il", "en-im", "en-in", "en-io", "en-je", "en-jm", "en-ke", "en-ki", "en-kn", "en-ky", "en-lc", "en-lr", "en-ls", "en-lu", "en-mg", "en-mh", "en-mo", "en-mp", "en-ms", "en-mt", "en-mu", "en-mw", "en-my", "en-na", "en-nf", "en-ng", "en-nl", "en-nr", "en-nu", "en-nz", "en-pg", "en-ph", "en-pk", "en-pn", "en-pr", "en-pw", "en-rw", "en-sb", "en-sc", "en-sd", "en-se", "en-sg", "en-sh", "en-si", "en-sl", "en-ss", "en-sx", "en-sz", "en-tc", "en-tk", "en-to", "en-tt", "en-tv", "en-tz", "en-ug", "en-um", "en-us", "en-vc", "en-vg", "en-vi", "en-vu", "en-ws", "en-za", "en-zm", "en-zw", "eo", "eo-001", "es", "es-419", "es-ar", "es-bo", "es-br", "es-bz", "es-cl", "es-co", "es-cr", "es-cu", "es-do", "es-ea", "es-ec", "es-es", "es-gq", "es-gt", "es-hn", "es-ic", "es-mx", "es-ni", "es-pa", "es-pe", "es-ph", "es-pr", "es-py", "es-sv", "es-us", "es-uy", "es-ve", "et", "et-ee", "eu", "eu-es", "ewo", "ewo-cm", "fa", "fa-af", "fa-ir", "ff", "ff-cm", "ff-gn", "ff-mr", "ff-sn", "fi", "fi-fi", "fil", "fil-ph", "fo", "fo-dk", "fo-fo", "fr", "fr-be", "fr-bf", "fr-bi", "fr-bj", "fr-bl", "fr-ca", "fr-cd", "fr-cf", "fr-cg", "fr-ch", "fr-ci", "fr-cm", "fr-dj", "fr-dz", "fr-fr", "fr-ga", "fr-gf", "fr-gn", "fr-gp", "fr-gq", "fr-ht", "fr-km", "fr-lu", "fr-ma", "fr-mc", "fr-mf", "fr-mg", "fr-ml", "fr-mq", "fr-mr", "fr-mu", "fr-nc", "fr-ne", "fr-pf", "fr-pm", "fr-re", "fr-rw", "fr-sc", "fr-sn", "fr-sy", "fr-td", "fr-tg", "fr-tn", "fr-vu", "fr-wf", "fr-yt", "fur", "fur-it", "fy", "fy-nl", "ga", "ga-ie", "gd", "gd-gb", "gl", "gl-es", "gsw", "gsw-ch", "gsw-fr", "gsw-li", "gu", "gu-in", "guz", "guz-ke", "gv", "gv-im", "ha", "ha-gh", "ha-ne", "ha-ng", "haw", "haw-us", "he", "hi", "hi-in", "hr", "hr-ba", "hr-hr", "hsb", "hsb-de", "hu", "hu-hu", "hy", "hy-am", "id", "ig", "ig-ng", "ii", "ii-cn", "id-id", "is", "is-is", "it", "it-ch", "it-it", "it-sm", "it-va", "he-il", "ja", "ja-jp", "jgo", "jgo-cm", "yi", "yi-001", "jmc", "jmc-tz", "ka", "ka-ge", "kab", "kab-dz", "kam", "kam-ke", "kde", "kde-tz", "kea", "kea-cv", "khq", "khq-ml", "ki", "ki-ke", "kk", "kk-kz", "kkj", "kkj-cm", "kl", "kl-gl", "kln", "kln-ke", "km", "km-kh", "kn", "kn-in", "ko", "ko-kp", "ko-kr", "kok", "kok-in", "ks", "ks-in", "ksb", "ksb-tz", "ksf", "ksf-cm", "ksh", "ksh-de", "kw", "kw-gb", "ky", "ky-kg", "lag", "lag-tz", "lb", "lb-lu", "lg", "lg-ug", "lkt", "lkt-us", "ln", "ln-ao", "ln-cd", "ln-cf", "ln-cg", "lo", "lo-la", "lrc", "lrc-iq", "lrc-ir", "lt", "lt-lt", "lu", "lu-cd", "luo", "luo-ke", "luy", "luy-ke", "lv", "lv-lv", "mas", "mas-ke", "mas-tz", "mer", "mer-ke", "mfe", "mfe-mu", "mg", "mg-mg", "mgh", "mgh-mz", "mgo", "mgo-cm", "mk", "mk-mk", "ml", "ml-in", "mn", "mn-mn", "mr", "mr-in", "ms", "ms-bn", "ms-my", "ms-sg", "mt", "mt-mt", "mua", "mua-cm", "my", "my-mm", "mzn", "mzn-ir", "naq", "naq-na", "nb", "nb-no", "nb-sj", "nd", "nd-zw", "nds", "nds-de", "nds-nl", "ne", "ne-in", "ne-np", "nl", "nl-aw", "nl-be", "nl-ch", "nl-bq", "nl-cw", "nl-lu", "nl-nl", "nl-sr", "nl-sx", "nmg", "nmg-cm", "nn", "nn-no", "nnh", "nnh-cm", "no", "no-no", "nus", "nus-ss", "nyn", "nyn-ug", "om", "om-et", "om-ke", "or", "or-in", "os", "os-ge", "os-ru", "pa", "pa-in", "pa-pk", "pl", "pl-pl", "prg", "prg-001", "ps", "ps-af", "pt", "pt-ao", "pt-br", "pt-ch", "pt-cv", "pt-gq", "pt-gw", "pt-lu", "pt-mo", "pt-mz", "pt-pt", "pt-st", "pt-tl", "qu", "qu-bo", "qu-ec", "qu-pe", "rm", "rm-ch", "rn", "rn-bi", "ro", "ro-md", "ro-ro", "rof", "rof-tz", "ru", "ru-by", "ru-kg", "ru-kz", "ru-md", "ru-ru", "ru-ua", "rw", "rw-rw", "rwk", "rwk-tz", "sa", "sah", "sah-ru", "saq", "saq-ke", "sbp", "sbp-tz", "sd", "sd-pk", "se", "se-fi", "se-no", "se-se", "seh", "seh-mz", "ses", "ses-ml", "sg", "sg-cf", "shi", "shi-ma", "si", "si-lk", "sk", "sk-sk", "sl", "sl-si", "smn", "smn-fi", "sn", "sn-zw", "so", "so-dj", "so-et", "so-ke", "so-so", "sq", "sq-al", "sq-mk", "sq-xk", "sr", "sr-ba", "sr-cs", "sr-me", "sr-rs", "sr-xk", "sv", "sv-ax", "sv-fi", "sv-se", "sw", "sw-cd", "sw-ke", "sw-tz", "sw-ug", "sy", "ta", "ta-in", "ta-lk", "ta-my", "ta-sg", "te", "te-in", "teo", "teo-ke", "teo-ug", "tg", "tg-tj", "th", "th-th", "ti", "ti-er", "ti-et", "tk", "tk-tm", "to", "to-to", "tr", "tr-cy", "tr-tr", "tt", "tt-ru", "twq", "twq-ne", "tzm", "tzm-ma", "ug", "ug-cn", "uk", "uk-ua", "ur", "ur-in", "ur-pk", "uz", "uz-af", "uz-uz", "vai", "vai-lr", "vi", "vi-vn", "vo", "vo-001", "vun", "vun-tz", "wae", "wae-ch", "wo", "wo-sn", "xog", "xog-ug", "yav", "yav-cm", "yo", "yo-bj", "yo-ng", "yue", "yue-cn", "yue-hk", "zgh", "zgh-ma", "zh", "zh-cn", "zh-hk", "zh-mo", "zh-sg", "zh-tw", "zh-hans", "zh-hant", "zu", "zu-za" ]
          }
        },
        "description" : "Request body object fro attaching objects to multi-language groups."
      },
      "ErrorDetail" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate"
          },
          "in" : {
            "type" : "string",
            "description" : "The name of the field or parameter in which the error was found."
          },
          "code" : {
            "type" : "string",
            "description" : "The status code associated with the error detail"
          },
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ]
            }
          }
        }
      },
      "SideOrCorner" : {
        "required" : [ "horizontalSide", "verticalSide" ],
        "type" : "object",
        "properties" : {
          "verticalSide" : {
            "type" : "string",
            "enum" : [ "TOP", "MIDDLE", "BOTTOM" ]
          },
          "horizontalSide" : {
            "type" : "string",
            "enum" : [ "LEFT", "CENTER", "RIGHT" ]
          }
        }
      },
      "BatchInputBlogPost" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "description" : "Blog posts to input.",
            "items" : {
              "$ref" : "#/components/schemas/BlogPost"
            }
          }
        },
        "description" : "Wrapper for providing an array of blog posts as inputs."
      },
      "ForwardPaging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          }
        },
        "description" : "Model definition for forward paging."
      },
      "BlogPostLanguageCloneRequestVNext" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of blog post to clone."
          },
          "language" : {
            "type" : "string",
            "description" : "Target language of new variant."
          }
        },
        "description" : "Request body object for creating new blog post language variant."
      },
      "VersionUser" : {
        "required" : [ "email", "fullName", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique ID of the User."
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the user."
          },
          "fullName" : {
            "type" : "string",
            "description" : "The first and last name of the User."
          }
        },
        "description" : "Model definition for a version user. Contains addition information about the user who created a version."
      },
      "ColorStop" : {
        "required" : [ "color" ],
        "type" : "object",
        "properties" : {
          "color" : {
            "$ref" : "#/components/schemas/RGBAColor"
          }
        }
      },
      "Gradient" : {
        "required" : [ "angle", "colors", "sideOrCorner" ],
        "type" : "object",
        "properties" : {
          "sideOrCorner" : {
            "$ref" : "#/components/schemas/SideOrCorner"
          },
          "angle" : {
            "$ref" : "#/components/schemas/Angle"
          },
          "colors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ColorStop"
            }
          }
        }
      },
      "LayoutSection" : {
        "required" : [ "cells", "cssClass", "cssId", "cssStyle", "label", "name", "params", "rowMetaData", "rows", "styles", "type", "w", "x" ],
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "integer",
            "format" : "int32"
          },
          "w" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "description" : "null"
          },
          "rows" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/LayoutSection"
              }
            }
          },
          "rowMetaData" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RowMetaData"
            }
          },
          "cells" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LayoutSection"
            }
          },
          "cssClass" : {
            "type" : "string"
          },
          "cssStyle" : {
            "type" : "string"
          },
          "cssId" : {
            "type" : "string"
          },
          "styles" : {
            "$ref" : "#/components/schemas/Styles"
          }
        }
      },
      "Paging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          },
          "prev" : {
            "$ref" : "#/components/schemas/PreviousPage"
          }
        },
        "description" : "Model definition for paging."
      },
      "BatchResponseBlogPostWithErrors" : {
        "required" : [ "completedAt", "results", "startedAt", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of batch operation.",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          },
          "results" : {
            "type" : "array",
            "description" : "Results of batch operation.",
            "items" : {
              "$ref" : "#/components/schemas/BlogPost"
            }
          },
          "numErrors" : {
            "type" : "integer",
            "description" : "Number of errors.",
            "format" : "int32"
          },
          "errors" : {
            "type" : "array",
            "description" : "Errors in batch operation.",
            "items" : {
              "$ref" : "#/components/schemas/StandardError"
            }
          },
          "requestedAt" : {
            "type" : "string",
            "description" : "Time of batch operation request.",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "description" : "Time of batch operation start.",
            "format" : "date-time"
          },
          "completedAt" : {
            "type" : "string",
            "description" : "Time of batch operation completion.",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Links associated with batch operation."
          }
        },
        "description" : "Response object for batch operations on blog posts with errors."
      },
      "Error" : {
        "required" : [ "category", "correlationId", "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate",
            "example" : "An error occurred"
          },
          "correlationId" : {
            "type" : "string",
            "description" : "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format" : "uuid",
            "example" : "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "category" : {
            "type" : "string",
            "description" : "The error category"
          },
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "errors" : {
            "type" : "array",
            "description" : "further information about the error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "invalidPropertyName" : [ "propertyValue" ],
              "missingScopes" : [ "scope1", "scope2" ]
            }
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of link names to associated URIs containing documentation about the error or recommended remediation steps"
          }
        },
        "example" : {
          "message" : "Invalid input (details will vary based on the error)",
          "correlationId" : "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category" : "VALIDATION_ERROR",
          "links" : {
            "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "VersionBlogPost" : {
        "required" : [ "id", "object", "updatedAt", "user" ],
        "type" : "object",
        "properties" : {
          "object" : {
            "$ref" : "#/components/schemas/BlogPost"
          },
          "user" : {
            "$ref" : "#/components/schemas/VersionUser"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of the version."
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "description" : "Model definition of a version of a blog post."
      },
      "BlogPost" : {
        "required" : [ "abStatus", "abTestId", "archived", "archivedInDashboard", "attachedStylesheets", "authorName", "blogAuthorId", "campaign", "categoryId", "contentGroupId", "contentTypeCategory", "created", "createdById", "currentState", "currentlyPublished", "deletedAt", "domain", "dynamicPageDataSourceId", "dynamicPageDataSourceType", "enableDomainStylesheets", "enableGoogleAmpOutputOverride", "enableLayoutStylesheets", "featuredImage", "featuredImageAltText", "folderId", "footerHtml", "headHtml", "htmlTitle", "id", "includeDefaultCustomCss", "language", "layoutSections", "linkRelCanonicalUrl", "mabExperimentId", "metaDescription", "name", "pageExpiryDate", "pageExpiryEnabled", "pageExpiryRedirectId", "pageExpiryRedirectUrl", "password", "postBody", "postSummary", "publicAccessRules", "publicAccessRulesEnabled", "publishDate", "publishImmediately", "rssBody", "rssSummary", "slug", "state", "tagIds", "themeSettingsValues", "translatedFromId", "translations", "updated", "updatedById", "url", "useFeaturedImage", "widgetContainers", "widgets" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique ID of the Blog Post."
          },
          "slug" : {
            "type" : "string",
            "description" : "The path of the this blog post. This field is appended to the domain to construct the url of this post."
          },
          "contentGroupId" : {
            "type" : "string",
            "description" : "The ID of the parent Blog this Blog Post is associated with."
          },
          "campaign" : {
            "type" : "string",
            "description" : "The GUID of the marketing campaign this Blog Post is a part of."
          },
          "categoryId" : {
            "type" : "integer",
            "description" : "ID of the type of object this is. Should always .",
            "format" : "int32"
          },
          "state" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "An ENUM descibing the current state of this Blog Post."
          },
          "name" : {
            "type" : "string",
            "description" : "The internal name of the Blog Post."
          },
          "mabExperimentId" : {
            "type" : "string"
          },
          "archived" : {
            "type" : "boolean"
          },
          "authorName" : {
            "type" : "string",
            "description" : "The name of the user that updated this Blog Post."
          },
          "abTestId" : {
            "type" : "string"
          },
          "createdById" : {
            "type" : "string",
            "description" : "The ID of the user that created this Blog Post."
          },
          "updatedById" : {
            "type" : "string",
            "description" : "The ID of the user that updated this Blog Post."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain this Blog Post will resolve to. If null, the Blog Post will default to the domain of the ParentBlog."
          },
          "abStatus" : {
            "type" : "string",
            "enum" : [ "master", "variant", "loser_variant", "mab_master", "mab_variant", "automated_master", "automated_variant", "automated_loser_variant" ]
          },
          "folderId" : {
            "type" : "string"
          },
          "widgetContainers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "description" : "A data structure containing the data for all the modules inside the containers for this post. This will only be populated if the page has widget containers."
          },
          "widgets" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "description" : "A data structure containing the data for all the modules for this page."
          },
          "language" : {
            "type" : "string",
            "description" : "The explicitly defined ISO 639 language code of the Blog Post. If null, the Blog Post will default to the language of the ParentBlog.",
            "enum" : [ "af", "af-na", "af-za", "agq", "agq-cm", "ak", "ak-gh", "am", "am-et", "ar", "ar-001", "ar-ae", "ar-bh", "ar-dj", "ar-dz", "ar-eg", "ar-eh", "ar-er", "ar-il", "ar-iq", "ar-jo", "ar-km", "ar-kw", "ar-lb", "ar-ly", "ar-ma", "ar-mr", "ar-om", "ar-ps", "ar-qa", "ar-sa", "ar-sd", "ar-so", "ar-ss", "ar-sy", "ar-td", "ar-tn", "ar-ye", "as", "as-in", "asa", "asa-tz", "ast", "ast-es", "az", "az-az", "bas", "bas-cm", "be", "be-by", "bem", "bem-zm", "bez", "bez-tz", "bg", "bg-bg", "bm", "bm-ml", "bn", "bn-bd", "bn-in", "bo", "bo-cn", "bo-in", "br", "br-fr", "brx", "brx-in", "bs", "bs-ba", "ca", "ca-ad", "ca-es", "ca-fr", "ca-it", "ccp", "ccp-bd", "ccp-in", "ce", "ce-ru", "cgg", "cgg-ug", "chr", "chr-us", "ckb", "ckb-iq", "ckb-ir", "cs", "cs-cz", "cu", "cu-ru", "cy", "cy-gb", "da", "da-dk", "da-gl", "dav", "dav-ke", "de", "de-at", "de-be", "de-ch", "de-de", "de-gr", "de-it", "de-li", "de-lu", "dje", "dje-ne", "dsb", "dsb-de", "dua", "dua-cm", "dyo", "dyo-sn", "dz", "dz-bt", "ebu", "ebu-ke", "ee", "ee-gh", "ee-tg", "el", "el-cy", "el-gr", "en", "en-001", "en-150", "en-ae", "en-ag", "en-ai", "en-as", "en-at", "en-au", "en-bb", "en-be", "en-bi", "en-bm", "en-bs", "en-bw", "en-bz", "en-ca", "en-cc", "en-ch", "en-ck", "en-cm", "en-cx", "en-cy", "en-de", "en-dg", "en-dk", "en-dm", "en-er", "en-fi", "en-fj", "en-fk", "en-fm", "en-gb", "en-gd", "en-gg", "en-gh", "en-gi", "en-gm", "en-gu", "en-gy", "en-hk", "en-ie", "en-il", "en-im", "en-in", "en-io", "en-je", "en-jm", "en-ke", "en-ki", "en-kn", "en-ky", "en-lc", "en-lr", "en-ls", "en-lu", "en-mg", "en-mh", "en-mo", "en-mp", "en-ms", "en-mt", "en-mu", "en-mw", "en-my", "en-na", "en-nf", "en-ng", "en-nl", "en-nr", "en-nu", "en-nz", "en-pg", "en-ph", "en-pk", "en-pn", "en-pr", "en-pw", "en-rw", "en-sb", "en-sc", "en-sd", "en-se", "en-sg", "en-sh", "en-si", "en-sl", "en-ss", "en-sx", "en-sz", "en-tc", "en-tk", "en-to", "en-tt", "en-tv", "en-tz", "en-ug", "en-um", "en-us", "en-vc", "en-vg", "en-vi", "en-vu", "en-ws", "en-za", "en-zm", "en-zw", "eo", "eo-001", "es", "es-419", "es-ar", "es-bo", "es-br", "es-bz", "es-cl", "es-co", "es-cr", "es-cu", "es-do", "es-ea", "es-ec", "es-es", "es-gq", "es-gt", "es-hn", "es-ic", "es-mx", "es-ni", "es-pa", "es-pe", "es-ph", "es-pr", "es-py", "es-sv", "es-us", "es-uy", "es-ve", "et", "et-ee", "eu", "eu-es", "ewo", "ewo-cm", "fa", "fa-af", "fa-ir", "ff", "ff-cm", "ff-gn", "ff-mr", "ff-sn", "fi", "fi-fi", "fil", "fil-ph", "fo", "fo-dk", "fo-fo", "fr", "fr-be", "fr-bf", "fr-bi", "fr-bj", "fr-bl", "fr-ca", "fr-cd", "fr-cf", "fr-cg", "fr-ch", "fr-ci", "fr-cm", "fr-dj", "fr-dz", "fr-fr", "fr-ga", "fr-gf", "fr-gn", "fr-gp", "fr-gq", "fr-ht", "fr-km", "fr-lu", "fr-ma", "fr-mc", "fr-mf", "fr-mg", "fr-ml", "fr-mq", "fr-mr", "fr-mu", "fr-nc", "fr-ne", "fr-pf", "fr-pm", "fr-re", "fr-rw", "fr-sc", "fr-sn", "fr-sy", "fr-td", "fr-tg", "fr-tn", "fr-vu", "fr-wf", "fr-yt", "fur", "fur-it", "fy", "fy-nl", "ga", "ga-ie", "gd", "gd-gb", "gl", "gl-es", "gsw", "gsw-ch", "gsw-fr", "gsw-li", "gu", "gu-in", "guz", "guz-ke", "gv", "gv-im", "ha", "ha-gh", "ha-ne", "ha-ng", "haw", "haw-us", "he", "hi", "hi-in", "hr", "hr-ba", "hr-hr", "hsb", "hsb-de", "hu", "hu-hu", "hy", "hy-am", "id", "ig", "ig-ng", "ii", "ii-cn", "id-id", "is", "is-is", "it", "it-ch", "it-it", "it-sm", "it-va", "he-il", "ja", "ja-jp", "jgo", "jgo-cm", "yi", "yi-001", "jmc", "jmc-tz", "ka", "ka-ge", "kab", "kab-dz", "kam", "kam-ke", "kde", "kde-tz", "kea", "kea-cv", "khq", "khq-ml", "ki", "ki-ke", "kk", "kk-kz", "kkj", "kkj-cm", "kl", "kl-gl", "kln", "kln-ke", "km", "km-kh", "kn", "kn-in", "ko", "ko-kp", "ko-kr", "kok", "kok-in", "ks", "ks-in", "ksb", "ksb-tz", "ksf", "ksf-cm", "ksh", "ksh-de", "kw", "kw-gb", "ky", "ky-kg", "lag", "lag-tz", "lb", "lb-lu", "lg", "lg-ug", "lkt", "lkt-us", "ln", "ln-ao", "ln-cd", "ln-cf", "ln-cg", "lo", "lo-la", "lrc", "lrc-iq", "lrc-ir", "lt", "lt-lt", "lu", "lu-cd", "luo", "luo-ke", "luy", "luy-ke", "lv", "lv-lv", "mas", "mas-ke", "mas-tz", "mer", "mer-ke", "mfe", "mfe-mu", "mg", "mg-mg", "mgh", "mgh-mz", "mgo", "mgo-cm", "mk", "mk-mk", "ml", "ml-in", "mn", "mn-mn", "mr", "mr-in", "ms", "ms-bn", "ms-my", "ms-sg", "mt", "mt-mt", "mua", "mua-cm", "my", "my-mm", "mzn", "mzn-ir", "naq", "naq-na", "nb", "nb-no", "nb-sj", "nd", "nd-zw", "nds", "nds-de", "nds-nl", "ne", "ne-in", "ne-np", "nl", "nl-aw", "nl-be", "nl-ch", "nl-bq", "nl-cw", "nl-lu", "nl-nl", "nl-sr", "nl-sx", "nmg", "nmg-cm", "nn", "nn-no", "nnh", "nnh-cm", "no", "no-no", "nus", "nus-ss", "nyn", "nyn-ug", "om", "om-et", "om-ke", "or", "or-in", "os", "os-ge", "os-ru", "pa", "pa-in", "pa-pk", "pl", "pl-pl", "prg", "prg-001", "ps", "ps-af", "pt", "pt-ao", "pt-br", "pt-ch", "pt-cv", "pt-gq", "pt-gw", "pt-lu", "pt-mo", "pt-mz", "pt-pt", "pt-st", "pt-tl", "qu", "qu-bo", "qu-ec", "qu-pe", "rm", "rm-ch", "rn", "rn-bi", "ro", "ro-md", "ro-ro", "rof", "rof-tz", "ru", "ru-by", "ru-kg", "ru-kz", "ru-md", "ru-ru", "ru-ua", "rw", "rw-rw", "rwk", "rwk-tz", "sa", "sah", "sah-ru", "saq", "saq-ke", "sbp", "sbp-tz", "sd", "sd-pk", "se", "se-fi", "se-no", "se-se", "seh", "seh-mz", "ses", "ses-ml", "sg", "sg-cf", "shi", "shi-ma", "si", "si-lk", "sk", "sk-sk", "sl", "sl-si", "smn", "smn-fi", "sn", "sn-zw", "so", "so-dj", "so-et", "so-ke", "so-so", "sq", "sq-al", "sq-mk", "sq-xk", "sr", "sr-ba", "sr-cs", "sr-me", "sr-rs", "sr-xk", "sv", "sv-ax", "sv-fi", "sv-se", "sw", "sw-cd", "sw-ke", "sw-tz", "sw-ug", "sy", "ta", "ta-in", "ta-lk", "ta-my", "ta-sg", "te", "te-in", "teo", "teo-ke", "teo-ug", "tg", "tg-tj", "th", "th-th", "ti", "ti-er", "ti-et", "tk", "tk-tm", "to", "to-to", "tr", "tr-cy", "tr-tr", "tt", "tt-ru", "twq", "twq-ne", "tzm", "tzm-ma", "ug", "ug-cn", "uk", "uk-ua", "ur", "ur-in", "ur-pk", "uz", "uz-af", "uz-uz", "vai", "vai-lr", "vi", "vi-vn", "vo", "vo-001", "vun", "vun-tz", "wae", "wae-ch", "wo", "wo-sn", "xog", "xog-ug", "yav", "yav-cm", "yo", "yo-bj", "yo-ng", "yue", "yue-cn", "yue-hk", "zgh", "zgh-ma", "zh", "zh-cn", "zh-hk", "zh-mo", "zh-sg", "zh-tw", "zh-hans", "zh-hant", "zu", "zu-za" ]
          },
          "translatedFromId" : {
            "type" : "string",
            "description" : "ID of the primary blog post this object was translated from."
          },
          "translations" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ContentLanguageVariation"
            }
          },
          "dynamicPageDataSourceType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dynamicPageDataSourceId" : {
            "type" : "string"
          },
          "blogAuthorId" : {
            "type" : "string",
            "description" : "The ID of the Blog Author associated with this Blog Post."
          },
          "tagIds" : {
            "type" : "array",
            "description" : "List of IDs for the tags associated with this Blog Post.",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "htmlTitle" : {
            "type" : "string",
            "description" : "The html title of this Blog Post."
          },
          "enableGoogleAmpOutputOverride" : {
            "type" : "boolean",
            "description" : "Boolean to allow overriding the AMP settings for the blog."
          },
          "useFeaturedImage" : {
            "type" : "boolean",
            "description" : "Boolean to determine if this post should use a featuredImage."
          },
          "postBody" : {
            "type" : "string",
            "description" : "The HTML of the main post body."
          },
          "postSummary" : {
            "type" : "string",
            "description" : "The summary of the blog post that will appear on the main listing page."
          },
          "rssBody" : {
            "type" : "string",
            "description" : "The contents of the RSS body for this Blog Post."
          },
          "rssSummary" : {
            "type" : "string",
            "description" : "The contents of the RSS summary for this Blog Post."
          },
          "currentlyPublished" : {
            "type" : "boolean"
          },
          "pageExpiryEnabled" : {
            "type" : "boolean"
          },
          "pageExpiryRedirectId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pageExpiryRedirectUrl" : {
            "type" : "string"
          },
          "pageExpiryDate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "includeDefaultCustomCss" : {
            "type" : "boolean",
            "description" : "Boolean to determine whether or not the Primary CSS Files should be applied."
          },
          "enableLayoutStylesheets" : {
            "type" : "boolean",
            "description" : "Boolean to determine whether or not the styles from the template should be applied."
          },
          "enableDomainStylesheets" : {
            "type" : "boolean",
            "description" : "Boolean to determine whether or not the styles from the template should be applied."
          },
          "publishImmediately" : {
            "type" : "boolean",
            "description" : "Set this to true if you want to be published immediately when the schedule publish endpoint is called, and to ignore the publish_date setting."
          },
          "featuredImage" : {
            "type" : "string",
            "description" : "The featuredImage of this Blog Post."
          },
          "featuredImageAltText" : {
            "type" : "string",
            "description" : "Alt Text of the featuredImage."
          },
          "linkRelCanonicalUrl" : {
            "type" : "string",
            "description" : "Optional override to set the URL to be used in the rel=canonical link tag on the page."
          },
          "contentTypeCategory" : {
            "type" : "string",
            "description" : "An ENUM descibing the type of this object. Should always be BLOG_POST.",
            "enum" : [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
          },
          "attachedStylesheets" : {
            "type" : "array",
            "description" : "List of stylesheets to attach to this blog post. These stylesheets are attached to just this page. Order of precedence is bottom to top, just like in the HTML.",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "metaDescription" : {
            "type" : "string",
            "description" : "A description that goes in <meta> tag on the page."
          },
          "headHtml" : {
            "type" : "string",
            "description" : "Custom HTML for embed codes, javascript, etc. that goes in the <head> tag of the page."
          },
          "footerHtml" : {
            "type" : "string",
            "description" : "Custom HTML for embed codes, javascript that should be placed before the </body> tag of the page."
          },
          "archivedInDashboard" : {
            "type" : "boolean",
            "description" : "If True, the post will not show up in your dashboard, although the post could still be live."
          },
          "publicAccessRulesEnabled" : {
            "type" : "boolean",
            "description" : "Boolean to determine whether or not to respect publicAccessRules."
          },
          "publicAccessRules" : {
            "type" : "array",
            "description" : "Rules for require member registration to access private content.",
            "items" : {
              "$ref" : "#/components/schemas/PublicAccessRule"
            }
          },
          "layoutSections" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/LayoutSection"
            }
          },
          "themeSettingsValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            }
          },
          "url" : {
            "type" : "string",
            "description" : "A generated field representing the URL of this blog post."
          },
          "password" : {
            "type" : "string",
            "description" : "Set this to create a password protected page. Entering the password will be required to view the page."
          },
          "currentState" : {
            "type" : "string",
            "description" : "A generated ENUM descibing the current state of this Blog Post. Should always match state.",
            "enum" : [ "AUTOMATED", "AUTOMATED_DRAFT", "AUTOMATED_SENDING", "AUTOMATED_FOR_FORM", "AUTOMATED_FOR_FORM_BUFFER", "AUTOMATED_FOR_FORM_DRAFT", "AUTOMATED_FOR_FORM_LEGACY", "BLOG_EMAIL_DRAFT", "BLOG_EMAIL_PUBLISHED", "DRAFT", "DRAFT_AB", "DRAFT_AB_VARIANT", "ERROR", "LOSER_AB_VARIANT", "PAGE_STUB", "PRE_PROCESSING", "PROCESSING", "PUBLISHED", "PUBLISHED_AB", "PUBLISHED_AB_VARIANT", "PUBLISHED_OR_SCHEDULED", "RSS_TO_EMAIL_DRAFT", "RSS_TO_EMAIL_PUBLISHED", "SCHEDULED", "SCHEDULED_AB", "SCHEDULED_OR_PUBLISHED", "AUTOMATED_AB", "AUTOMATED_AB_VARIANT", "AUTOMATED_DRAFT_AB", "AUTOMATED_DRAFT_ABVARIANT", "AUTOMATED_LOSER_ABVARIANT" ]
          },
          "publishDate" : {
            "type" : "string",
            "description" : "The date (ISO8601 format) the blog post is to be published at.",
            "format" : "date-time"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deletedAt" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) when this Blog Post was deleted.",
            "format" : "date-time"
          }
        },
        "description" : "Model definition for a Blog Post."
      },
      "BatchResponseBlogPost" : {
        "required" : [ "completedAt", "results", "startedAt", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of batch operation.",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          },
          "results" : {
            "type" : "array",
            "description" : "Results of batch operation.",
            "items" : {
              "$ref" : "#/components/schemas/BlogPost"
            }
          },
          "requestedAt" : {
            "type" : "string",
            "description" : "Time of batch operation request.",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "description" : "Time of batch operation start.",
            "format" : "date-time"
          },
          "completedAt" : {
            "type" : "string",
            "description" : "Time of batch operation completion.",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Links associated with batch operation."
          }
        },
        "description" : "Response object for batch operations on blog posts."
      },
      "CollectionResponseWithTotalBlogPostForwardPaging" : {
        "required" : [ "results", "total" ],
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "description" : "Total number of blog posts.",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "Collection of blog posts.",
            "items" : {
              "$ref" : "#/components/schemas/BlogPost"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/ForwardPaging"
          }
        },
        "description" : "Response object for collections of blog posts with pagination information."
      },
      "PublicAccessRule" : {
        "type" : "object"
      },
      "BackgroundImage" : {
        "required" : [ "backgroundPosition", "backgroundSize", "imageUrl" ],
        "type" : "object",
        "properties" : {
          "imageUrl" : {
            "type" : "string"
          },
          "backgroundSize" : {
            "type" : "string"
          },
          "backgroundPosition" : {
            "type" : "string",
            "enum" : [ "TOP_LEFT", "TOP_CENTER", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT" ]
          }
        }
      },
      "Angle" : {
        "required" : [ "units", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number"
          },
          "units" : {
            "type" : "string",
            "enum" : [ "deg", "grad", "rad", "turn" ]
          }
        }
      },
      "ErrorCategory" : {
        "type" : "object",
        "description" : "Model definition for an error category."
      },
      "PreviousPage" : {
        "required" : [ "before" ],
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          }
        },
        "description" : "Model definition for a previous page"
      },
      "ContentScheduleRequestVNext" : {
        "required" : [ "id", "publishDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the object to be scheduled."
          },
          "publishDate" : {
            "type" : "string",
            "description" : "The date the object should transition from scheduled to published.",
            "format" : "date-time"
          }
        },
        "description" : "Request body object for scheduling the publish of content"
      },
      "ContentCloneRequestVNext" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the object to be cloned."
          },
          "cloneName" : {
            "type" : "string",
            "description" : "Name of the cloned object."
          }
        },
        "description" : "Request body object for cloning content."
      },
      "NextPage" : {
        "required" : [ "after" ],
        "type" : "object",
        "properties" : {
          "after" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          }
        },
        "description" : "Model definition for a next page."
      },
      "Styles" : {
        "required" : [ "backgroundColor", "backgroundGradient", "backgroundImage", "flexboxPositioning", "forceFullWidthSection", "maxWidthSectionCentering", "verticalAlignment" ],
        "type" : "object",
        "properties" : {
          "verticalAlignment" : {
            "type" : "string",
            "enum" : [ "TOP", "MIDDLE", "BOTTOM" ]
          },
          "backgroundColor" : {
            "$ref" : "#/components/schemas/RGBAColor"
          },
          "backgroundImage" : {
            "$ref" : "#/components/schemas/BackgroundImage"
          },
          "backgroundGradient" : {
            "$ref" : "#/components/schemas/Gradient"
          },
          "maxWidthSectionCentering" : {
            "type" : "integer",
            "format" : "int32"
          },
          "forceFullWidthSection" : {
            "type" : "boolean"
          },
          "flexboxPositioning" : {
            "type" : "string",
            "enum" : [ "TOP_LEFT", "TOP_CENTER", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT" ]
          }
        }
      }
    },
    "responses" : {
      "Error" : {
        "description" : "An error occurred.",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "oauth2_legacy" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://app.hubspot.com/oauth/authorize",
            "tokenUrl" : "https://api.hubapi.com/oauth/v1/token",
            "scopes" : {
              "content" : "Read from and write to my Content"
            }
          }
        }
      },
      "hapikey" : {
        "type" : "apiKey",
        "name" : "hapikey",
        "in" : "query"
      }
    }
  },
  "x-hubspot-available-client-libraries" : [ "PHP", "Node", "Python", "Ruby" ]
}